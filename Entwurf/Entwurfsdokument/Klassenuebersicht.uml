// Diese Klasse repräsentiert ein 3D-Modell für einen Pfeil, der an selektierten Kanten erscheinen soll.
public class ArrowModel : 
  Attributes:
    // Das Info-Objekt, das die Position und Richtung des Pfeils enthält.
    + Info : ArrowModelInfo
  Methods:
    // Zeichnet den Pfeil.
    + Draw (GameTime) : void
    // 
    + Intersects (GameObjectDistance , Ray ray) : GameObjectDistance
    // Erstellt ein neues Pfeilmodell in dem angegebenen GameScreen mit einem bestimmten Info-Objekt, das Position und Richtung des Pfeils festlegt.
    + ArrowModel (GameScreen screen, ArrowModelInfo info) : GameScreen
    // 
    + Update (GameTime) : void

// Ein Objekt dieser Klasse hält alle Informationen hält, die zur Erstellung eines Pfeil-3D-Modelles (ArrowModel) notwendig sind.
public class ArrowModelInfo : 
  Attributes:
    // Die Richtung, die die der Pfeil zeigen soll.
    + Direction : Vector3
  Methods:
    // Erstellt ein neues ArrowModelInfo-Objekt an einer bestimmten Position im 3D-Raum, das in eine bestimmte Richtung zeigt.
    + ArrowModelInfo (Vector3 position, Vector3 direction) : Vector3

// 
public class AudioSettingsScreen : 
  Attributes:
    // 
    # settingsMenu : void
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// Diese Klasse repräsentiert eine Option, die die Werte Wahr oder Falsch annehmen kann.
public class BooleanOptionInfo : 
  Attributes:
    // Ein Property, das den aktuell abgespeicherten Wert zurück gibt.
    + Value : bool
  Methods:
    + BooleanOptionInfo (String section, String name, String defaultValue, ConfigFile configFile) : String

// Jede Instanz der World-Klasse hält eine für diese Spielwelt verwendete Kamera als Attribut.
// Die Hauptfunktion der Kamera-Klasse ist das Berechnen der drei Matrizen, die für die Positionierung
// und Skalierung von 3D-Objekten in einer bestimmten Spielwelt benötigt werden, der View-, World- und Projection-Matrix.
// Um diese Matrizen zu berechnen, benötigt die Kamera unter Anderem Informationen über die aktuelle Kamera-Position,
// das aktuelle Kamera-Target und das Field of View.
public class Camera : 
  Attributes:
    // Die Position der Kamera.
    + Position : Vector3
    // Das Ziel der Kamera.
    + Target : Vector3
    // Das Field of View.
    + FoV : float
    // Die View-Matrix wird über die statische Methode CreateLookAt der Klasse Matrix des XNA-Frameworks mit Matrix.CreateLookAt (Position, Target, Vector3.Up) berechnet.
    + ViewMatrix : Matrix
    // Die World-Matrix wird mit Matrix.CreateFromYawPitchRoll und den drei Rotationswinkeln berechnet.
    + WorldMatrix : Matrix
    // Die Projektionsmatrix wird über die statische XNA-Methode Matrix.CreatePerspectiveFieldOfView berechnet.
    + ProjectionMatrix : Matrix
    // Eine Position, um die rotiert werden soll, wenn der User die rechte Maustaste gedrückt hält und die Maus bewegt.
    + ArcballTarget : Vector3
    // Berechnet ein Bounding-Frustum, das benötigt wird, um festzustellen, ob ein 3D-Objekt sich um Blickfeld des Spielers befindet.
    + ViewFrustum : BoundingFrustum
    // Eine Referenz auf die Spielwelt, für die die Kamera zuständig ist.
    - World : World
    // 
    + Rotation : Angles3
  Methods:
    // 
    + TargetDirection (Vector3 ) : Vector3
    // 
    + TargetDistance (float ) : float
    // 
    + Camera (GameScreen screen, World world) : GameScreen
    // 
    + GetMouseRay (Ray , Vector2 mousePosition) : Ray
    // 
    + Update (GameTime) : void

// 
public class CelShadingEffect : 
  Attributes:
  Methods:
    // 
    # DrawRenderTarget (GameTime) : void
    // 
    + DrawModel (GameTime, GameModel GameModel) : GameModel
    // 
    + RemapModel (GameModel GameModel) : GameModel
    // 
    + CelShadingEffect (GameScreen screen) : GameScreen

// 
public class Challenge : 
  Attributes:
    // 
    + Start : Knot
    // 
    + Target : Knot
    // 
    - highscore : SortedList<Integer, String>
    // 
    + Name : String
    // 
    - file : IChallengeIO
    // 
    + Highscore : IEnumerator<KeyValuePair<String, Integer>>
    // 
    + Info : ChallengeMetaData
  Methods:
    // 
    + Challenge (ChallengeInfo info, Challenge ) : ChallengeInfo
    // 
    + Challenge (Challenge , IChallangeIO file) : Challenge
    // 
    + CreateChallenge (Boolean , Knot start, Knot target, String name, IChallengeIO file) : Boolean
    // 
    + AddToHighscore (String name, Integer time) : String

// 
public class ChallengeFileIO : 
  Attributes:
    // 
    + Highscore : IEnumerable<KeyValuePair<String, Integer>>
    // 
    + Name : String
    // 
    + StartKnot : Knot
    // 
    + TargetKnot : Knot
    // 
    - startParser : KnotStringIO
    // 
    - targetParser : KnotStringIO
    // 
    + Meta : ChallengeMetaData
  Methods:
    // 
    + ChallengeFileIO (String path) : String
    // 
    + Save (Challenge challenge) : Challenge

// 
public class ChallengeLoadScreen : 
  Attributes:
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class ChallengeMetaData : 
  Attributes:
    // 
    + Name : String
    // 
    + Start : KnotMetaData
    // 
    + Target : KnotMetaData
    // 
    + File : IChallengeIO
  Methods:

// 
public class ChallengeMode : 
  Attributes:
    // 
    + PlayerKnot : void
    // 
    + ChallengeKnot : void
    // 
    + PlayerKnot : World
    // 
    - PlayerWorld : World
    // 
    - ChallengeKnotRenderer : ModelRenderer
    // 
    - PlayerKnotRenderer : ModelRenderer
    // 
    - PlayerKnotMovement : PipeMovement
    // 
    + Undo : Stack<Knot>
    // 
    + Redo : Stack<Knot>
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class CheckBoxItem : 
  Attributes:
    // 
    - option : BooleanOptionInfo
  Methods:
    // 
    + CheckBoxItem (BooleanOptionInfo option) : BooleanOptionInfo

// 
public class Circle : 
  Attributes:
    // 
    + Content : T
    // 
    + Next : Circle
    // 
    + Previous : Circle
  Methods:
    // 
    + Circle (T content) : T

// 
public class ColorPicker : 
  Attributes:
    // 
    + Color : Color
  Methods:
    // 
    + OnKeyEvent () : void
    // 
    + OnLeftClick () : void
    // 
    + OnRightClick () : void
    // 
    + OnKeyEvent (Rectangle ) : Rectangle

// 
public class ColorPickItem : 
  Attributes:
    // 
    + Color : Color
  Methods:

// 
public class ConfigFile : 
  Attributes:
  Methods:
    // 
    + SetOption (String section, String option, String value) : String
    // 
    + GetOption (Boolean , String section, String option, Boolean defaultValue) : Boolean
    // 
    + GetOption (String , String section, String option, String defaultValue) : String
    // 
    + SetOption (String section, String option, Boolean _value) : String

// 
public class ConfirmDialog : 
  Attributes:
    // 
    - buttons : Menu
  Methods:

// 
public class ControlSettingsScreen : 
  Attributes:
    // 
    # settingsMenu : void
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class CreativeLoadScreen : 
  Attributes:
  Methods:
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen
    // 
    + Update (GameTime) : void

// 
public class CreativeMode : 
  Attributes:
    // 
    + Knot : void
    // 
    + Knot : World
    // 
    - KnotRenderer : ModelRenderer
    // 
    + Undo : Stack<Knot>
    // 
    + Redo : Stack<Knot>
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class CreditsScreen : 
  Attributes:
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class Dialog : 
  Attributes:
    // 
    + Name : String
    // 
    + Text : String
  Methods:
    // 
    + OnKeyEvent () : void
    // 
    + OnLeftClick () : void
    // 
    + OnRightClick () : void
    // 
    + OnKeyEvent (Rectangle ) : Rectangle

// 
public class DistinctOptionInfo : 
  Attributes:
    // 
    + ValidValues : HashSet<string>
    // 
    + Value : String
  Methods:
    // 
    + DistinctOptionInfo (String section, String name, String defaultValue, IEnumerable<string> validValues, ConfigFile configFile) : String

// 
public class DrawableGameScreenComponent : 
  Attributes:
    // 
    + Screen : GameScreen
    // 
    + Index : DisplayLayer
  Methods:
    // 
    + SubComponents (GameTime, IEnumerable GameTime) : IEnumerable
    // 
    + DrawableGameStateComponent (GameScreen screen, DisplayLayer index) : GameScreen

// 
public class DropDownEntry : 
  Attributes:
    // 
    + Text : String
  Methods:

// 
public class DropDownMenuItem : 
  Attributes:
    // 
    - dropdown : VerticalMenu
  Methods:
    // 
    + AddEntries (DistinctOptionInfo option) : DistinctOptionInfo
    // 
    + AddEntries (DropDownEntry enties) : DropDownEntry

// 
public class Edge : 
  Attributes:
    // 
    + Color : Color
    // 
    + Direction : Direction
    // 
    + Rectangles : List<int>
  Methods:
    // 
    + Edge (Direction direction) : Direction
    // 
    + Get3DDirection (Vector3 ) : Vector3

// 
public class FadeEffect : 
  Attributes:
    // 
    - IsFinished : Boolean
    // 
    - PreviousRenderTarget : RenderTarget2D
  Methods:
    // 
    + FadeEffect (GameScreen newScreen, GameScreen oldScreen) : GameScreen
    // 
    # DrawRenderTarget (GameTime) : void

// 
public class FileIO : 
  Attributes:
    // 
    + FileName : String
  Methods:
    // 
    + ConvertToFileName (String, String ) : String

// 
public class Game : 
  Attributes:
  Methods:

// 
public class Game : 
  Attributes:
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class GameModelInfo : 
  Attributes:
    // 
    + Modelname : String
    // 
    + Rotation : Angles3
    // 
    + Scale : Vector3
  Methods:
    // 
    + GameModelInfo (String modelname, Angles3 rotation) : String

// 
public class GameObjectInfo : 
  Attributes:
    // 
    + IsMovable : Boolean
    // 
    + IsSelectable : Boolean
    // 
    + IsVisible : Boolean
    // 
    + Position : Vector3
  Methods:
    // 
    + Equals (GameObjectInfo GameObjectInfo, Boolean ) : GameObjectInfo
    // 
    + Equals (T other, Boolean ) : T

// 
public class GameScreen : 
  Attributes:
    // 
    + Game : Knot3Game
    // 
    + Input : Input
    // 
    + PostProcessingEffect : RenderEffect
    // 
    + CurrentRenderEffects : RenderEffectStack
  Methods:
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen
    // 
    + BeforeExit (GameTime, GameScreen nextScreen) : GameScreen
    // 
    + Update (GameTime) : void
    // 
    + GameScreen (Knot3Game game) : Knot3Game
    // 
    + AddGameComponents (IGameStateComponent[] components) : IGameStateComponent[]
    // 
    + RemoveGameComponents (IGameStateComponent[] components) : IGameStateComponent[]

// 
public class GameScreenComponent : 
  Attributes:
    // 
    + Index : DisplayLayer
    // 
    + Screen : GameScreen
  Methods:
    // 
    + SubComponents (GameTime, IEnumerable GameTime) : IEnumerable
    // 
    + GameStateComponent (GameScreen screen, DisplayLayer index) : GameScreen

// 
public class GraphicsSettingsScreen : 
  Attributes:
    // 
    # settingsMenu : void
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public interface IChallengeIO : 
  Attributes:
    // 
    + Highscore : IEnumerable<KeyValuePair<String, Integer>>
    // 
    + Name : String
    // 
    + StartKnot : Knot
    // 
    + TargetKnot : Knot
    // 
    + Meta : ChallengeMetaData
  Methods:
    // 
    + Save (Challenge challenge) : Challenge

// 
public interface ICloneable : 
  Attributes:
  Methods:
    // 
    + Clone (Object ) : Object

// 
public interface IEnumerable : 
  Attributes:
  Methods:
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator

// 
public interface IEnumerable<Edge> : 
  Attributes:
  Methods:

// 
public interface IEnumerable<IGameObject> : 
  Attributes:
  Methods:

// 
public interface IEnumerable<MenuItem> : 
  Attributes:
  Methods:

// 
public interface IEnumerable1 : 
  Attributes:
  Methods:
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator

// 
public interface IEquatable : 
  Attributes:
  Methods:
    // 
    + Equals (T other, Boolean ) : T

// 
public interface IEquatable<Angles3> : 
  Attributes:
  Methods:

// 
public interface IEquatable<GameObjectInfo> : 
  Attributes:
  Methods:

// 
public interface IEquatable1 : 
  Attributes:
  Methods:
    // 
    + Equals (T other, Boolean ) : T

// 
public class IGameObject : 
  Attributes:
  Methods:

// 
public interface IGameObject : 
  Attributes:
    // 
    + Info : GameObjectInfo
    // 
    + World : World
  Methods:
    // 
    + Center (Vector3 ) : Vector3
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + Intersects (GameObjectDistance , Ray ray) : GameObjectDistance

// 
public class IGameObject : 
  Attributes:
    // 
    + Info : GameObjectInfo
    // 
    + World : World
    // 
    + Alpha : float
    // 
    + BaseColor : Color
    // 
    + HightlightColor : Color
    // 
    + HighlightIntensity : float
    // 
    + Info : GameModelInfo
    // 
    + Model : XNA.Model
    // 
    + World : World
    // 
    + WorldMatrix : Matrix
  Methods:
    // 
    + Center (Vector3 ) : Vector3
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + Intersects (GameObjectDistance , Ray ray) : GameObjectDistance
    // 
    + Center (Vector3 ) : Vector3
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + Intersects (Ray Ray, GameObjectDistance ) : Ray
    // 
    + GameModel (GameScreen, GameModelInfo) : void

// 
public interface IGameStateComponent : 
  Attributes:
    // 
    + Index : DisplayLayer
    // 
    + Screen : GameScreen
  Methods:
    // 
    + SubComponents (GameTime, IEnumerable ) : IEnumerable

// 
public interface IJunction : 
  Attributes:
    // 
    + EdgeFrom : Edge
    // 
    + EdgeTo : Edge
  Methods:

// 
public interface IKeyEventListener : 
  Attributes:
    // 
    + Index : DisplayLayer
    // 
    + IsKeyEventEnabled : Boolean
    // 
    + ValidKeys : List<Keys>
  Methods:
    // 
    + OnKeyEvent () : void

// 
public interface IKnotIO : 
  Attributes:
    // 
    + Edges : IEnumerable<Edge>
    // 
    + Name : String
    // 
    + Meta : KnotMetaData
  Methods:
    // 
    + Save (Knot knot) : Knot

// 
public interface IMouseEventListener : 
  Attributes:
    // 
    + Index : DisplayLayer
    // 
    + IsMouseEventEnabled : Boolean
  Methods:
    // 
    + OnLeftClick () : void
    // 
    + OnRightClick () : void
    // 
    + Bounds (Rectangle ) : Rectangle

// 
public class InputItem : 
  Attributes:
    // 
    + InputText : String
  Methods:

// 
public class KeyInputItem : 
  Attributes:
    // 
    - option : OptionInfo
  Methods:
    // 
    + OnKeyEvent () : void

// 
public class Knot : 
  Attributes:
    // 
    + Name : String
    // 
    - edges : Circle
    // 
    + Info : KnotMetaData
    // 
    - file : IKnotIO
    // 
    + EdgesChanged : Action
    // 
    + SeletedEdges : IEnumerable<Edge>
  Methods:
    // 
    + Knot () : void
    // 
    + Save () : void
    // 
    + ClearSelection () : void
    // 
    + Knot (IKnotIO file) : IKnotIO
    // 
    + Knot (KnotMetaData info) : KnotMetaData
    // 
    + IsValidMove (Boolean , Direction dir, Integer distance) : Boolean
    // 
    + Move (Boolean , Direction dir, Integer distance) : Boolean
    // 
    +  (Knot knotA, Knot knotB, Boolean ) : Knot
    // 
    +  (Boolean , Knot knotA, Knot knotB) : Boolean
    // 
    + GetEnumerator (IEnumerator<Edge> ) : IEnumerator<Edge>
    // 
    + Save (IKnotInfo file) : IKnotInfo
    // 
    + Save (Object ) : Object
    // 
    + AddToSelection (Edge edge) : Edge
    // 
    + RemoveFromSelection (Edge edge) : Edge
    // 
    + ClearSelection (Edge edge) : Edge
    // 
    + IsSelected (Boolean , Edge edge) : Boolean

// 
public class Knot3Game : 
  Attributes:
    // 
    + IsFullScreen : Boolean
    // 
    + Screens : Stack<GameScreen>
    // 
    + VSync : Boolean
    // 
    + Graphics : GraphicsDeviceManager
  Methods:
    // 
    + Game () : void
    // 
    + Initialize () : void
    // 
    + LoadContent () : void
    // 
    + UnloadContent () : void
    // 
    + Draw (GameTime) : void
    // 
    + Game (GameTime) : void

// 
public class KnotFileIO : 
  Attributes:
    // 
    + Edges : IEnumerable<Edge>
    // 
    + Name : String
    // 
    - parser : KnotStringIO
    // 
    + Meta : KnotMetaData
  Methods:
    // 
    + KnotFileIO (String path) : String
    // 
    + Save (Knot knot) : Knot

// 
public class KnotMetaData : 
  Attributes:
    // 
    + Name : String
    // 
    + File : IKnotIO
    // 
    + CountEdges : Integer
  Methods:
    // 
    # KnotInfo (KnotMetaData , String name, Integer countEdges, IKnotIO file) : KnotMetaData

// 
public class KnotStringIO : 
  Attributes:
    // 
    + Name : String
    // 
    + Edges : IErnumerable<Edge>
    // 
    + Content : String
    // 
    + Meta : KnotMetaData
  Methods:
    // 
    + Save (Knot knot) : Knot
    // 
    + KnotStringIO (String content) : String

// 
public class Localizer : 
  Attributes:
  Methods:
    // 
    + Localize (String , String text) : String

// 
public class Menu : 
  Attributes:
    // 
    + Name : String
    // 
    + RelativeItemSize : Func<int, Vector2>
    // 
    + RelativeItemPosition : Func<int, Vector2>
    // 
    + ItemForegroundColor : Func<ItemState, Vector2>
    // 
    + ItemBackgroundColor : Func<ItemState, Vector2>
    // 
    + ItemAlignX : HorizontalAlignment
    // 
    + ItemAlignY : VerticalAlignment
  Methods:
    // 
    + Add (MenuItem item) : MenuItem
    // 
    + Delete (MenuItem item) : MenuItem
    // 
    + GetItem (MenuItem , Integer i) : MenuItem
    // 
    + Size (Integer ) : Integer
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator

// 
public class MenuButton : 
  Attributes:
    // 
    + Name : String
  Methods:
    // 
    + MenuButton (String name) : String

// 
public class MenuItem : 
  Attributes:
    // 
    + ItemState : ItemState
    // 
    + ItemOrder : Integer
    // 
    + Text : String
  Methods:
    // 
    + OnLeftClick () : void
    // 
    + OnRightClick () : void
    // 
    + OnKeyEvent () : void
    // 
    + OnLeftClick (Rectangle ) : Rectangle

// 
public class MenuScreen : 
  Attributes:
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class ModelFactory : 
  Attributes:
    // 
    - cache : Dictionary<GameModelInfo, GameModel>
    // 
    - createModel : Func<GameScreen, GameModelInfo, GameModel>
  Methods:
    // 
    + this (GameModel , GameScreen state, GameModelInfo info) : GameModel
    // 
    + ModelFactory (Func<GameScreen, GameModelInfo, ) : void

// 
public class ModelkeyHandler : 
  Attributes:
  Methods:
    // 
    + Update () : void

// 
public class ModelMouseHandler : 
  Attributes:
  Methods:
    // 
    + Update () : void

// 
public class ModelRenderer : 
  Attributes:
    // 
    + Info : GameObjectInfo
    // 
    + World : World
    // 
    - arrows : List<ArrowModel>
    // 
    - nodes : List<NodeModel>
    // 
    - pipes : List<PipeModel>
    // 
    + Knot : Knot
    // 
    - pipeFactory : ModelFactory
    // 
    - nodeFactory : ModelFactory
    // 
    - arrowFactory : ModelFactory
  Methods:
    // 
    + Center (Vector3 ) : Vector3
    // 
    + Intersects (Ray Ray, GameObjectDistance ) : Ray
    // 
    + OnEdgesChanged () : void
    // 
    + ModelRenderer (GameScreen screen, GameObjectInfo info) : GameScreen
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator

// 
public class MousePointer : 
  Attributes:
  Methods:
    // 
    + MousePointer (GameState) : void
    // 
    + Draw (GameTime, ) : void

// 
public class NodeMap : 
  Attributes:
  Methods:
    // 
    + From (Edge edge, Node ) : Edge
    // 
    + To (Edge edge, Node ) : Edge
    // 
    + OnEdgesChanged () : void

// 
public class NodeModel : 
  Attributes:
    // 
    + Info : NodeModelInfo
  Methods:
    // 
    + NodeModel (GameScreen screen, NodeModelInfo info) : GameScreen
    // 
    + Draw (GameTime) : void
    // 
    + Update (GameTime) : void

// 
public class NodeModelInfo : 
  Attributes:
    // 
    + EdgeFrom : Edge
    // 
    + EdgeTo : Edge
    // 
    + Knot : Knot
    // 
    + Position : Vector3
  Methods:
    // 
    + NodeModelInfo (Knot knot, Edge from, Edge to) : Knot

// 
public class OptionInfo : 
  Attributes:
    // 
    - configFile : ConfigFile
    // 
    + Section : String
    // 
    + Name : String
    // 
    + DefaultValue : String
    // 
    + Value : String
  Methods:
    // 
    + OptionInfo (String section, String name, String defaultValue, ConfigFile configFile) : String

// 
public class Options : 
  Attributes:
    // 
    + Default : ConfigFile
  Methods:

// 
public class PauseDialog : 
  Attributes:
    // 
    - pauseMenu : VerticalMenu
  Methods:

// 
public class PipeModel : 
  Attributes:
    // 
    + Info : PipeModelInfo
  Methods:
    // 
    + Intersects (GameObjectDistance , Ray ray) : GameObjectDistance
    // 
    + PipeModel (GameScreen screen, PipeModelInfo info) : GameScreen

// 
public class PipeModelInfo : 
  Attributes:
    // 
    + Edge : Edge
    // 
    + Knot : Knot
    // 
    + PositionFrom : Vector3
    // 
    + PositionTo : Vector3
  Methods:
    // 
    + PipeModelInfo (Knot knot, Edge edge) : Knot

// 
public class PipeMovement : 
  Attributes:
    // 
    + Info : GameObjectInfo
    // 
    + Knot : Knot
    // 
    + World : World
  Methods:
    // 
    + Center (Vector3 ) : Vector3
    // 
    + Intersects (Ray Ray, GameObjectDistance ) : Ray
    // 
    + Update (GameTime) : void
    // 
    + PipeMovement (GameState, World, GameObjectInfo) : void
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator
    // 
    + Draw (GameTime) : void

// 
public class PrinterIO : 
  Attributes:
    // 
    + Edges : IEnumerable<Edge>
    // 
    + Name : String
    // 
    + Meta : KnotMetaData
  Methods:
    // 
    + Save (Knot knot) : Knot
    // 
    + PrinterIO (string path) : string

// 
public class ProfileSettingsScreen : 
  Attributes:
    // 
    # settingsMenu : void
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class RenderEffect : 
  Attributes:
    // 
    + RenderTarget : RenderTarget2D
    // 
    # screen : GameScreen
    // 
    # spriteBatch : SpriteBatch
  Methods:
    // 
    + Begin (GameTime) : void
    // 
    + End (GameTime) : void
    // 
    + DrawModel (GameTime, GameModel GameModel) : GameModel
    // 
    + RemapModel (GameModel GameModel) : GameModel
    // 
    # DrawRenderTarget (GameTime) : void

// 
public class RenderEffectStack : 
  Attributes:
    // 
    + CurrentEffect : IRenderEffect
    // 
    - DefaultEffect : IRenderEffect
  Methods:
    // 
    + Pop (IRenderEffect ) : IRenderEffect
    // 
    + Push (IRenderEffect effect) : IRenderEffect
    // 
    + RenderEffectStack (IRenderEffect defaultEffect) : IRenderEffect

// 
public class SaveDialog : 
  Attributes:
  Methods:

// 
public class SettingsScreen : 
  Attributes:
    // 
    # navigation : void
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class ShadowGameModel : 
  Attributes:
    // 
    + ShadowColor : Color
    // 
    + ShadowAlpha : float
  Methods:
    // 
    + ShadowGameModel (GameScreen sreen, GameModel decoratedModel) : GameScreen
    // 
    + Draw (GameTime) : void

// 
public class ShadowGameObject : 
  Attributes:
    // 
    + Info : GameObjectInfo
    // 
    + World : World
    // 
    + ShadowPosition : Vector3
    // 
    + OriginalPosition : Vector3
  Methods:
    // 
    + Center (Vector3 ) : Vector3
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + Intersects (Ray Ray, GameObjectDistance ) : Ray
    // 
    + ShadowGameObject (GameScreen screen, IGameObject decoratedObj) : GameScreen

// 
public class SliderItem : 
  Attributes:
    // 
    + Value : Integer
    // 
    + MinValue : Integer
    // 
    + MaxValue : Integer
  Methods:

// 
public class StandardEffect : 
  Attributes:
  Methods:
    // 
    # DrawRenderTarget (GameTime) : void
    // 
    + StandardEffect (GameScreen screen) : GameScreen

// 
public class SubMenu : 
  Attributes:
  Methods:

// 
public class T : 
  Attributes:
  Methods:

// 
public class T : 
  Attributes:
  Methods:

// 
public class T : 
  Attributes:
  Methods:

// 
public class T : 
  Attributes:
    // 
    + X : float
    // 
    + Y : float
    // 
    + Z : float
    // 
    + Zero : Angles3
  Methods:
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator
    // 
    + Equals (T other, Boolean ) : T
    // 
    + Equals (T other, Boolean ) : T
    // 
    + FromDegrees (float X, float Y, float Z, Angles3 ) : float
    // 
    + Angles3 (float X, float Y, float Z) : float
    // 
    + ToDegrees (float X, float Y, float Z) : float

// 
public interface T : 
  Attributes:
  Methods:

// 
public interface T : 
  Attributes:
  Methods:

// 
public class TextInputDialog : 
  Attributes:
    // 
    + InputText : String
  Methods:

// 
public class TutorialChallengeMode : 
  Attributes:
  Methods:
    // 
    + Entered (GameTime, GameScreen previousScreen) : GameScreen

// 
public class VerticalMenu : 
  Attributes:
  Methods:
    // 
    + AlignItems () : void

// 
public class Widget : 
  Attributes:
    // 
    + RelativeSize : Vector2
    // 
    + RelativePosition : Vector2
    // 
    + IsVisible : bool
    // 
    + BackgroundColor : Func<Color>
    // 
    + ForegroundColor : Func<Color>
    // 
    + AlignX : HorizontalAlignment
    // 
    + AlignY : VerticalAlignment
  Methods:
    // 
    + BoundingBox (Rectangle ) : Rectangle
    // 
    + Widget (GameScreen screen, DisplayLayer drawOrder) : GameScreen

// 
public class WidgetKeyHandler : 
  Attributes:
  Methods:
    // 
    + Update () : void

// 
public class WidgetMouseHandler : 
  Attributes:
  Methods:
    // 
    + Update () : void

// 
public class World : 
  Attributes:
    // 
    + Camera : void
    // 
    + Camera : List<IGameObject>
    // 
    + SelectedObject : IGameObject
    // 
    + CurrentEffect : IRenderEffect
  Methods:
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + World (GameScreen screen) : GameScreen
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator

// 
public class XNA.DrawableGameComponent : 
  Attributes:
  Methods:
    // 
    + Draw (GameTime) : void
    // 
    + Update (GameTime) : void

// 
public class XNA.Game : 
  Attributes:
  Methods:
    // 
    + Game () : void
    // 
    + Initialize () : void
    // 
    + LoadContent () : void
    // 
    + UnloadContent () : void
    // 
    + Game (GameTime) : void
    // 
    + Draw (GameTime) : void

// 
public class XNA.GameComponent : 
  Attributes:
  Methods:
    // 
    + Update (GameTime) : void

// 
public interface XNA.IGameComponent : 
  Attributes:
  Methods:

// 
public interface XNA.IGameComponent : 
  Attributes:
    // 
    + Camera : void
    // 
    + IsMovable : Boolean
    // 
    + IsSelectable : Boolean
    // 
    + IsVisible : Boolean
    // 
    + Position : Vector3
    // 
    + Modelname : String
    // 
    + Rotation : Angles3
    // 
    + Scale : Vector3
    // 
    + Edge : Edge
    // 
    + Knot : Knot
    // 
    + PositionFrom : Vector3
    // 
    + PositionTo : Vector3
    // 
    + EdgeFrom : Edge
    // 
    + EdgeTo : Edge
    // 
    + Knot : Knot
    // 
    + Position : Vector3
    // 
    + Info : PipeModelInfo
    // 
    + Info : NodeModelInfo
    // 
    + Camera : List<IGameObject>
    // 
    + SelectedObject : IGameObject
    // 
    + CurrentEffect : IRenderEffect
    // 
    + Screen : GameScreen
    // 
    + Index : DisplayLayer
    // 
    + Index : DisplayLayer
    // 
    + Screen : GameScreen
    // 
    + Position : Vector3
    // 
    + Target : Vector3
    // 
    + FoV : float
    // 
    + ViewMatrix : Matrix
    // 
    + WorldMatrix : Matrix
    // 
    + ProjectionMatrix : Matrix
    // 
    + ArcballTarget : Vector3
    // 
    + ViewFrustum : BoundingFrustum
    // 
    - World : World
    // 
    + Rotation : Angles3
    // 
    + RenderTarget : RenderTarget2D
  Methods:
    // 
    + Equals (GameObjectInfo GameObjectInfo, Boolean ) : GameObjectInfo
    // 
    + Equals (T other, Boolean ) : T
    // 
    + GameModelInfo (String modelname, Angles3 rotation) : String
    // 
    + PipeModelInfo (Knot knot, Edge edge) : Knot
    // 
    + NodeModelInfo (Knot knot, Edge from, Edge to) : Knot
    // 
    + Intersects (GameObjectDistance , Ray ray) : GameObjectDistance
    // 
    + PipeModel (GameScreen screen, PipeModelInfo info) : GameScreen
    // 
    + NodeModel (GameScreen screen, NodeModelInfo info) : GameScreen
    // 
    + Draw (GameTime) : void
    // 
    + Update (GameTime) : void
    // 
    + Update (GameTime) : void
    // 
    + Draw (GameTime) : void
    // 
    + World (GameScreen screen) : GameScreen
    // 
    + GetEnumerator (IEnumerator ) : IEnumerator
    // 
    + SubComponents (GameTime, IEnumerable GameTime) : IEnumerable
    // 
    + DrawableGameStateComponent (GameScreen screen, DisplayLayer index) : GameScreen
    // 
    + SubComponents (GameTime, IEnumerable GameTime) : IEnumerable
    // 
    + GameStateComponent (GameScreen screen, DisplayLayer index) : GameScreen
    // 
    + TargetDirection (Vector3 ) : Vector3
    // 
    + TargetDistance (float ) : float
    // 
    + Camera (GameScreen screen, World world) : GameScreen
    // 
    + GetMouseRay (Ray , Vector2 mousePosition) : Ray
    // 
    + Update (GameTime) : void
    // 
    + Begin (GameTime) : void
    // 
    + End (GameTime) : void
    // 
    + DrawModel (GameTime, GameModel model) : GameModel
    // 
    + RemapModel (GameModel model) : GameModel

