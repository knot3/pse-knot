// Diese Klasse repräsentiert die Rollwinkel der drei Achsen X, Y und Z.
// Sie bietet Möglichkeit vordefinierte Winkelwerte zu verwenden, z.B. stellt Zero den Nullvektor dar.
// Die Umwandlung zwischen verschiedenen Winkelmaßen wie Grad- und Bogenmaß unterstützt sie durch entsprechende Methoden.
public class Core.Angles3 : IEquatable<Angles3>
  Attributes:
    // Der Winkel im Bogenmaß für das Rollen um die X-Achse. Siehe statische Methode Matrix.CreateRotationX(float) des XNA-Frameworks.
    + X : float
    // Der Winkel im Bogenmaß für das Rollen um die Y-Achse. Siehe statische Methode Matrix.CreateRotationY(float) des XNA-Frameworks.
    + Y : float
    // Der Winkel im Bogenmaß für das Rollen um die Z-Achse. Siehe statische Methode Matrix.CreateRotationZ(float) des XNA-Frameworks.
    + Z : float
    // Eine statische Eigenschaft mit dem Wert X = 0, Y = 0, Z = 0.
    + Zero : Angles3 static
  Methods:
    // Eine statische Methode, die Grad in Bogenmaß konvertiert.
    + FromDegrees (float X, float Y, float Z) : Angles3 static
    // Konstruiert ein neues Angles3-Objekt mit drei gegebenen Winkeln im Bogenmaß.
    + Angles3 (float X, float Y, float Z) : void
    // Konvertiert Bogenmaß in Grad.
    + ToDegrees (float X, float Y, float Z) : void

// Diese Klasse ArrowModel repräsentiert ein 3D-Modell für einen Pfeil, zum Einblenden an selektierten Kanten (s. Edge).
public class GameObjects.ArrowModel : GameModel
  Attributes:
    // Das Info-Objekt, das die Position und Richtung des ArrowModel\grq s enthält.
    + Info : ArrowModelInfo
  Methods:
    // Zeichnet den Pfeil.
    + Draw (GameTime GameTime) : void
    // Überprüft, ob der Mausstrahl den Pfeil schneidet.
    + Intersects (Ray ray) : GameObjectDistance
    // Erstellt ein neues Pfeilmodell in dem angegebenen GameScreen mit einem bestimmten Info-Objekt, das Position und Richtung des Pfeils festlegt.
    + ArrowModel (GameScreen screen, ArrowModelInfo info) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void

// Ein Objekt der Klasse ArrowModelInfo hält alle Informationen, die zur Erstellung eines Pfeil-3D-Modelles (s. ArrowModel) notwendig sind.
public class GameObjects.ArrowModelInfo : GameModelInfo
  Attributes:
    // Gibt die Richtung, in die der Pfeil zeigen soll an.
    + Direction : Vector3
  Methods:
    // Erstellt ein neues ArrowModelInfo-Objekt an einer bestimmten Position position im 3D-Raum. Dieses zeigt in eine durch direction bestimmte Richtung.
    + ArrowModelInfo (Vector3 position, Vector3 direction) : void

// Die Klasse  AudioSettingsScreen steht für den Spielzustand, der die Audio-Einstellungen repräsentiert.
public class Screens.AudioSettingsScreen : SettingsScreen
  Attributes:
    // Das Menü, das die Einstellungen enthält.
    - settingsMenu : VerticalMenu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erzeugt ein neues AudioSettingsScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + AudioSettingsScreen (Knot3Game game) : void

// Diese Klasse repräsentiert eine Option, welche die Werte \glqq Wahr\grqq~oder \glqq Falsch\grqq~annehmen kann.
public class Core.BooleanOptionInfo : DistinctOptionInfo
  Attributes:
    // Eine Eigenschaft, die den aktuell abgespeicherten Wert zurückgibt.
    + Value : bool
  Methods:
    // Erstellt eine neue Option, welche die Werte \glqq Wahr\grqq~oder \glqq Falsch\grqq~annehmen kann. Mit dem angegebenen Namen, in dem
    // angegebenen Abschnitt der angegebenen Einstellungsdatei.
    // [base=section, name, defaultValue?ConfigFile.True:ConfigFile.False, ValidValues, configFile]
    + BooleanOptionInfo (String section, String name, bool defaultValue, ConfigFile configFile) : void

// Jede Instanz der World-Klasse hält eine für diese Spielwelt verwendete Kamera als Attribut.
// Die Hauptfunktion der Kamera-Klasse ist das Berechnen der drei Matrizen, die für die Positionierung
// und Skalierung von 3D-Objekten in einer bestimmten Spielwelt benötigt werden, der View-, World- und Projection-Matrix.
// Um diese Matrizen zu berechnen, benötigt die Kamera unter Anderem Informationen über die aktuelle Kamera-Position,
// das aktuelle Kamera-Ziel und das Field of View.
public class Core.Camera : GameScreenComponent
  Attributes:
    // Die Position der Kamera.
    + Position : Vector3
    // Das Ziel der Kamera.
    + Target : Vector3
    // Das Sichtfeld.
    + FoV : float
    // Die View-Matrix wird über die statische Methode CreateLookAt der Klasse Matrix des XNA-Frameworks
    // mit Matrix.CreateLookAt (Position, Target, Vector3.Up) berechnet.
    + ViewMatrix : Matrix
    // Die World-Matrix wird mit Matrix.CreateFromYawPitchRoll und den drei Rotationswinkeln berechnet.
    + WorldMatrix : Matrix
    // Die Projektionsmatrix wird über die statische XNA-Methode Matrix.CreatePerspectiveFieldOfView berechnet.
    + ProjectionMatrix : Matrix
    // Eine Position, um die rotiert werden soll, wenn der User die rechte Maustaste gedrückt hält und die Maus bewegt.
    + ArcballTarget : Vector3
    // Berechnet ein Bounding-Frustum, das benötigt wird, um festzustellen, ob ein 3D-Objekt sich im Blickfeld des Spielers befindet.
    + ViewFrustum : BoundingFrustum
    // Eine Referenz auf die Spielwelt, für welche die Kamera zuständig ist.
    - World : World
    // Die Rotationswinkel.
    + Rotation : Angles3
  Methods:
    // Die Blickrichtung.
    + TargetDirection () : Vector3
    // Der Abstand zwischen der Kamera und dem Kamera-Ziel.
    + TargetDistance () : float
    // Erstellt eine neue Kamera in einem bestimmten GameScreen für eine bestimmte Spielwelt.
    + Camera (GameScreen screen, World world) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Berechnet einen Strahl für die angegebenene 2D-Mausposition.
    + GetMouseRay (Vector2 mousePosition) : Ray

// Ein Cel-Shading-Effekt.
public class RenderEffects.CelShadingEffect : RenderEffect
  Attributes:
  Methods:
    // !!!
    # DrawRenderTarget (GameTime GameTime) : void
    // 
    + DrawModel (GameModel GameModel, GameTime GameTime) : void
    // Weist dem 3D-Modell den Cel-Shader zu.
    + RemapModel (GameModel GameModel) : void
    // Erstellt einen neuen Cel-Shading-Effekt für den angegebenen GameScreen.
    + CelShadingEffect (GameScreen screen) : void

// Ein Objekt dieser Klasse repräsentiert eine Challenge.
public class KnotData.Challenge : 
  Attributes:
    // Der Ausgangsknoten, den der Spieler in den Referenzknoten transformiert.
    + Start : Knot
    // Der Referenzknoten, in den der Spieler den Ausgangsknoten transformiert.
    + Target : Knot
    // Eine sortierte Bestenliste.
    - highscore : SortedList<Integer, String>
    // Das Speicherformat der Challenge.
    - format : IChallengeIO
    // Ein öffentlicher Enumerator, der die Bestenliste unabhängig von der darunterliegenden Datenstruktur zugänglich macht.
    + Highscore : IEnumerator<KeyValuePair<String, Integer>>
    // Die Metadaten der Challenge.
    + MetaData : ChallengeMetaData
    // Der Name der Challenge.
    + Name : String
  Methods:
    // Erstellt ein Challenge-Objekt aus einem gegebenen Challenge-Metadaten-Objekt.
    // Erstellt ein Challenge-Objekt aus einer gegebenen Challenge-Datei.
    + Challenge (ChallengeMetaData meta, Knot start, Knot target) : void
    // Fügt eine neue Bestzeit eines bestimmten Spielers in die Bestenliste ein.
    + AddToHighscore (String name, Integer time) : void

// Implementiert das Speicherformat für Challenges.
public class KnotData.ChallengeFileIO : IChallengeIO
  Attributes:
  Methods:
    // Erstellt ein ChallengeFileIO-Objekt.
    + ChallengeFileIO () : void
    // Speichert eine Challenge in dem Dateinamen, der in dem Challenge-Objekt enthalten ist.
    + Save (Challenge challenge) : void
    // Lädt eine Challenge aus einer angegebenen Datei.
    + Load (String filename) : Challenge
    // Lädt die Metadaten einer Challenge aus einer angegebenen Datei.
    + LoadMetaData (String filename) : ChallengeMetaData

// Der Spielzustand, der den Ladebildschirm für Challenges darstellt.
public class Screens.ChallengeLoadScreen : MenuScreen
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Spielständen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erstellt eine neue Instanz eines ChallengeLoadScreen-Objekts und
    // initialisiert diese mit einem Knot3Game-Objekt.
    + ChallengeLoadScreen (Knot3Game game) : void

// Enthält Metadaten zu einer Challenge.
public class KnotData.ChallengeMetaData : 
  Attributes:
    // Der Name der Challenge.
    + Name : String
    // Der Ausgangsknoten, den der Spieler in den Referenzknoten transformiert.
    + Start : KnotMetaData
    // Der Referenzknoten, in den der Spieler den Ausgangsknoten transformiert.
    + Target : KnotMetaData
    // Das Format, aus dem die Metadaten der Challenge gelesen wurden oder null.
    + Format : IChallengeIO
    // Der Dateiname, aus dem die Metadaten der Challenge gelesen wurden oder in den sie abgespeichert werden.
    + Filename : String
    // Ein öffentlicher Enumerator, der die Bestenliste unabhängig von der darunterliegenden Datenstruktur zugänglich macht.
    + Highscore : IEnumerator<KeyValuePair<String, Integer>>
  Methods:
    // Erstellt ein Challenge-Metadaten-Objekt mit einem gegebenen Namen und den Metadaten des Ausgangs- und Referenzknotens.
    + ChallengeMetaData (String name, KnotMetaData start, KnotMetaData target, String filename, IChallengeIO format) : void

// Der Spielzustand, der während dem Spielen einer Challenge aktiv ist und für den Ausgangs- und Referenzknoten je eine 3D-Welt zeichnet.
public class Screens.ChallengeModeScreen : GameScreen
  Attributes:
    // Die Spielwelt in der die 3D-Modelle des dargestellten Referenzknotens enthalten sind.
    - ChallengeWorld : World
    // Die Spielwelt in der die 3D-Modelle des dargestellten Spielerknotens enthalten sind.
    - PlayerWorld : World
    // Der Controller, der aus dem Referenzknoten die 3D-Modelle erstellt.
    - ChallengeKnotRenderer : KnotRenderer
    // Der Controller, der aus dem Spielerknoten die 3D-Modelle erstellt.
    - PlayerKnotRenderer : KnotRenderer
    // Der Inputhandler, der die Kantenverschiebungen des Spielerknotens durchführt.
    - PlayerKnotMovement : EdgeMovement
    // Der Undo-Stack.
    + Undo : Stack<Knot>
    // Der Redo-Stack.
    + Redo : Stack<Knot>
    // Der Referenzknoten.
    + ChallengeKnot : Knot
    // Der Spielerknoten, der durch die Transformation des Spielers aus dem Ausgangsknoten entsteht.
    + PlayerKnot : Knot
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt die 3D-Welten und den Inputhandler in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erstellt eine neue Instanz eines ChallengeModeScreen-Objekts und
    // initialisiert diese mit einem Knot3Game-Objekt.
    + ChallengeModeScreen (Knot3Game game) : void

// Ein Menüeintrag, der einen Auswahlkasten darstellt.
public class Widgets.CheckBoxItem : MenuItem
  Attributes:
    // Die Option, die mit dem Auswahlkasten verknüpft ist.
    - option : BooleanOptionInfo
  Methods:
    // Erzeugt ein neues CheckBoxItem-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angaben zur Zeichenreihenfolge und der Auswahloption Pflicht.
    + CheckBoxItem (GameScreen screen, DisplayLayer drawOrder, BooleanOptionInfo option) : void

// Eine doppelt verkettete Liste.
public class KnotData.Circle : IEnumerable
  Attributes:
  Methods:

// Eine Wertesammlung der möglichen Klickzustände einer Maustaste.
public enum Core.ClickState
    // Wenn der Klickzustand nicht zugeordnet werden konnte. Undefiniert.
    None=0
    // Ein Einzelklick.
    SingleClick=1
    // Ein Doppelklick.
    DoubleClick=2

// Ein Steuerelement der grafischen Benutzeroberfläche, das eine Auswahl von Farben ermöglicht.
public class Widgets.ColorPicker : Widget, IKeyEventListener, IMouseEventListener
  Attributes:
    // Die ausgewählte Farbe.
    + Color : Color
  Methods:
    // Reagiert auf Tastatureingaben.
    + OnKeyEvent () : void
    // Gibt die Ausmaße des ColorPickers zurück.
    + Bounds () : Rectangle
    // Bei einem Linksklick wird eine Farbe ausgewählt und im Attribut Color abgespeichert.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Bei einem Rechtsklick geschieht nichts.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void
    // 
    + ColorPicker (Color def) : void

// Ein Menüeintrag, der eine aktuelle Farbe anzeigt und zum Ändern der Farbe per Mausklick einen ColorPicker öffnet.
public class Widgets.ColorPickItem : MenuItem
  Attributes:
    // Die aktuelle Farbe.
    + Color : Color
    // Der ColorPicker, der bei einem Mausklick auf den Menüeintrag geöffnet wird.
    - picker : ColorPicker
  Methods:
    // Erzeugt ein neues ColorPickItem-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angaben zur Zeichenreihenfolge und der Auswahloption Pflicht.
    + ColorPickItem (GameScreen screen, DisplayLayer drawOrder, Color color) : void

// Repräsentiert eine Einstellungsdatei.
public class Core.ConfigFile : 
  Attributes:
  Methods:
    // Setzt den Wert der Option mit dem angegebenen Namen in den angegebenen Abschnitt auf den angegebenen Wert.
    + SetOption (String section, String option, String value) : void
    // Gibt den aktuell in der Datei vorhandenen Wert für die angegebene Option in dem angegebenen Abschnitt zurück.
    + GetOption (String section, String option, Boolean defaultValue) : Boolean
    // Gibt den aktuell in der Datei vorhandenen Wert für die angegebene Option in dem angegebenen Abschnitt zurück.
    + GetOption (String section, String option, String defaultValue) : String
    // Setzt den Wert der Option mit dem angegebenen Namen in den angegebenen Abschnitt auf den angegebenen Wert.
    + SetOption (String section, String option, Boolean _value) : void

// Ein Dialog, der Schaltflächen zum Bestätigen einer Aktion anzeigt.
public class Widgets.ConfirmDialog : Dialog
  Attributes:
    // Das Menü, das Schaltflächen enthält.
    - buttons : Menu
  Methods:
    // Erzeugt ein neues ConfirmDialog-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angaben zur Zeichenreihenfolge, einer Zeichenkette für den Titel und für den eingeblendeten Text Pflicht.
    // [base=screen, drawOrder, title, text]
    + ConfirmDialog (GameScreen screen, DisplayLayer drawOrder, String title, String text) : void

// Der Spielzustand, der die Steuerungs-Einstellungen darstellt.
public class Screens.ControlSettingsScreen : SettingsScreen
  Attributes:
    // Das Menü, das die Einstellungen enthält.
    - settingsMenu : VerticalMenu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erzeugt ein neues ControlSettingsScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + ControlSettingsScreen (Knot3Game game) : void

// Der Spielzustand, der den Ladebildschirm für Knoten darstellt.
public class Screens.CreativeLoadScreen : MenuScreen
  Attributes:
  Methods:
    // Fügt das Menü mit dem Spielständen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Erzeugt ein neues CreativeLoadScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + CreativeLoadScreen (Knot3Game game) : void

// Der Spielzustand, der während dem Erstellen und Bearbeiten eines Knotens aktiv ist und für den Knoten eine 3D-Welt zeichnet.
public class Screens.CreativeModeScreen : GameScreen
  Attributes:
    // Die Spielwelt in der die 3D-Objekte des dargestellten Knotens enthalten sind.
    - World : World
    // Der Controller, der aus dem Knoten die 3D-Modelle erstellt.
    - KnotRenderer : KnotRenderer
    // Der Undo-Stack.
    + Undo : Stack<Knot>
    // Der Redo-Stack.
    + Redo : Stack<Knot>
    // Der Knoten, der vom Spieler bearbeitet wird.
    + Knot : Knot
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt die 3D-Welt und den Inputhandler in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime time) : void
    // Erzeugt ein neues CreativeModeScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + CreativeModeScreen (Knot3Game game) : void

// Der Spielzustand, der die Auflistung der Mitwirkenden darstellt.
public class Screens.CreditsScreen : MenuScreen
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Mitwirkenden in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erzeugt ein neues CreditsScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + CreditsScreen (Knot3Game game) : void

// Ein Dialog ist ein im Vordergrund erscheinendes Fenster, das auf Nutzerinteraktionen wartet.
public class Widgets.Dialog : Widget, IKeyEventListener, IMouseEventListener
  Attributes:
    // Der Fenstertitel.
    + Title : String
    // Der angezeigte Text.
    + Text : String
  Methods:
    // Durch Drücken der Entertaste wird die ausgewählte Aktion ausgeführt. Durch Drücken der Escape-Taste wird der Dialog abgebrochen.
    // Mit Hilfe der Pfeiltasten kann zwischen den Aktionen gewechselt werden.
    + OnKeyEvent () : void
    // Gibt die Ausmaße des Dialogs zurück.
    + Bounds () : Rectangle
    // Bei einem Linksklick geschieht nichts.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Bei einem Rechtsklick geschieht nichts.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void
    // Erzeugt ein neues Dialog-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angaben zur Zeichenreihenfolge, einer Zeichenkette für den Titel und für den eingeblendeten Text Pflicht.
    // [base=screen, drawOrder]
    + Dialog (GameScreen screen, DisplayLayer drawOrder, String title, String text) : void

// Eine Wertesammlung der möglichen Richtungen in einem dreidimensionalen Raum.
// Wird benutzt, damit keine ungültigen Kantenrichtungen angegeben werden können.
public enum KnotData.Direction
    // Links.
    Left=1
    // Rechts.
    Right=2
    // Hoch.
    Up=3
    // Runter.
    Down=4
    // Vorwärts.
    Forward=5
    // Rückwärts.
    Backward=6
    // Keine Richtung.
    Zero=0

// Die Zeichenreihenfolge der Elemente der grafischen Benutzeroberfläche.
public enum Core.DisplayLayer
    // Steht für die hinterste Ebene bei der Zeichenreihenfolge.
    None=0
    // Steht für eine Ebene hinter der Spielwelt, z.B. um
    // Hintergrundbilder darzustellen.
    Background=10
    // Steht für die Ebene in der die Spielwelt dargestellt wird.
    GameWorld=20
    // Steht für die Ebene in der die Dialoge dargestellt werden.
    // Dialoge werden vor der Spielwelt gezeichnet, damit der Spieler damit interagieren kann.
    Dialog=30
    // Steht für die Ebene in der Menüs gezeichnet werden. Menüs werden innerhalb von Dialogen angezeigt, müssen also davor gezeichnet werden, damit sie nicht vom Hintergrund des Dialogs verdeckt werden.
    Menu=40
    // Steht für die Ebene in der Menüeinträge gezeichnet werden. Menüeinträge werden vor Menüs gezeichnet.
    MenuItem=50
    // Steht für die Ebene in der Submenüs gezeichnet werden. Submenüs befinden sich in einer Ebene vor Menüeinträgen.
    SubMenu=60
    // Steht für die Ebene in der Submenüeinträge gezeichnet werden. Submenüeinträge befinden sich in einer Ebene vor Submenüs.
    SubMenuItem=70
    // Zum Anzeigen zusätzlicher Informationen bei der (Weiter-)Entwicklung oder beim Testen (z.B. ein FPS-Counter).
    Overlay=80
    // Die Maus ist das Hauptinteraktionswerkzeug, welches der Spieler
    // ständig verwendet. Daher muss die Maus bei der Interaktion immer
    // im Vordergrund sein. Cursor steht für die vorderste Ebene.
    Cursor=90

// Diese Klasse repräsentiert eine Option, die eine distinkte Werteliste annehmen kann.
public class Core.DistinctOptionInfo : OptionInfo
  Attributes:
    // Eine Menge von Texten, welche die für die Option gültigen Werte beschreiben.
    + ValidValues : HashSet<string>
    // Eine Eigenschaft, die den aktuell abgespeicherten Wert zurück gibt.
    + Value : String
  Methods:
    // Erstellt eine neue Option, die einen der angegebenen gültigen Werte annehmen kann, mit dem angegebenen Namen in dem
    // angegebenen Abschnitt der angegebenen Einstellungsdatei.
    // [base=section, name, defaultValue, configFile]
    + DistinctOptionInfo (String section, String name, String defaultValue, IEnumerable<string> validValues, ConfigFile configFile) : void

// Eine zeichenbare Spielkomponente, die in einem angegebenen Spielzustand verwendet wird und eine bestimmte Priorität hat.
public class Core.DrawableGameScreenComponent : XNA.DrawableGameComponent, IGameScreenComponent
  Attributes:
    // Der zugewiesene Spielzustand.
    + Screen : GameScreen
    // Die Zeichen- und Eingabepriorität.
    + Index : DisplayLayer
  Methods:
    // Gibt Spielkomponenten zurück, die in dieser Spielkomponente enthalten sind.
    // [returntype=IEnumerable<IGameScreenComponent>]
    + SubComponents (GameTime GameTime) : IEnumerable
    // Erzeugt eine neue Instanz eines DrawableGameScreenComponent-Objekts und ordnet dieser ein GameScreen-Objekt zu.
    // index bezeichnet die Zeichenebene, auf welche die Komponente zu zeichnen ist.
    + DrawableGameScreenComponent (GameScreen screen, DisplayLayer index) : void

// Repräsentiert einen Eintrag in einem Dropdown-Menü.
public class Widgets.DropDownEntry : 
  Attributes:
    // Der Text des Eintrags.
    + Text : String
    // Die Aktion, welche bei der Auswahl ausgeführt wird.
    + OnSelect : Action
  Methods:
    // Erzeugt eine neue Instanz eines DropDownEntry-Objekts.
    // text bezeichnet den Text für den Eintrag,
    // onSelect ist die Aktion, welche bei der Auswahl des Eintrags auzuführen ist (s. Action).
    + DropDownEntry (String text, Action onSelect) : void

// Ein Menüeintrag, der den ausgewählten Wert anzeigt und bei einem Linksklick ein Dropdown-Menü zur Auswahl eines neuen Wertes ein- oder ausblendet.
public class Widgets.DropDownMenuItem : MenuItem
  Attributes:
    // Das Dropdown-Menü, das ein- und ausgeblendet werden kann.
    - dropdown : VerticalMenu
  Methods:
    // Fügt Einträge in das Dropdown-Menü ein, die auf Einstellungsoptionen basieren.
    // Fügt Einträge in das Dropdown-Menü ein, die nicht auf Einstellungsoptionen basieren.
    + AddEntries (DistinctOptionInfo option) : void
    // Fügt Einträge in das Dropdown-Menü ein, die auf Einstellungsoptionen basieren.
    // Fügt Einträge in das Dropdown-Menü ein, die nicht auf Einstellungsoptionen basieren.
    + AddEntries (DropDownEntry enties) : void
    // Erzeugt ein neues ConfirmDialog-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem ist die Angabe der Zeichenreihenfolge Pflicht.
    + DropDownMenuItem (GameScreen screen, DisplayLayer drawOrder) : void

// Eine Kante eines Knotens, die aus einer Richtung und einer Farbe, sowie optional einer Liste von Flächennummern besteht.
public class KnotData.Edge : 
  Attributes:
    // Die Farbe der Kante.
    + Color : Color
    // Die Richtung der Kante.
    + Direction : Direction
    // Die Liste der Flächennummern, die an die Kante angrenzen.
    + Rectangles : List<int>
  Methods:
    // Erstellt eine neue Kante mit der angegebenen Richtung.
    + Edge (Direction direction) : void
    // Gibt die Richtung als normalisierten Vektor3 zurück.
    + Get3DDirection () : Vector3

// Ein Inputhandler, der für das Verschieben der Kanten zuständig ist.
public class GameObjects.EdgeMovement : IGameObject, IEnumerable<IGameObject>
  Attributes:
    // Enthält Informationen über die Position des Knotens.
    + Info : GameObjectInfo
    // Der Knoten, dessen Kanten verschoben werden können.
    + Knot : Knot
    // Die Spielwelt, in der sich die 3D-Modelle der Kanten befinden.
    + World : World
  Methods:
    // Gibt den Ursprung des Knotens zurück.
    + Center () : Vector3
    // Gibt immer \glqq null\grqq~zurück.
    + Intersects (Ray Ray) : GameObjectDistance
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // !!!
    + EdgeMovement (GameScreen screen, World world, GameObjectInfo info) : void
    // Gibt einen Enumerator über die während einer Verschiebeaktion dynamisch erstellten 3D-Modelle zurück.
    // [returntype=IEnumerator<IGameObject>]
    + GetEnumerator () : IEnumerator
    // Zeichnet die während einer Verschiebeaktion dynamisch erstellten 3D-Modelle.
    + Draw (GameTime GameTime) : void

// Ein Postprocessing-Effekt, der eine Überblendung zwischen zwei Spielzuständen darstellt.
public class RenderEffects.FadeEffect : RenderEffect
  Attributes:
    // Gibt an, ob die Überblendung abgeschlossen ist und das RenderTarget nur noch den neuen Spielzustand darstellt.
    - IsFinished : Boolean
    // Der zuletzt gerenderte Frame im bisherigen Spielzustand.
    - PreviousRenderTarget : RenderTarget2D
  Methods:
    // Erstellt einen Überblende-Effekt zwischen den angegebenen Spielzuständen.
    + FadeEffect (GameScreen newScreen, GameScreen oldScreen) : void
    // !!!
    # DrawRenderTarget (GameTime GameTime) : void

// Eine Hilfsklasse für Dateioperationen.
public class Core.FileUtility : 
  Attributes:
    // Das Einstellungsverzeichnis.
    + SettingsDirectory : String static
    // Das Spielstandverzeichnis.
    + SavegameDirectory : String static
    // Das Bildschirmfotoverzeichnis.
    + ScreenshotDirectory : String static
  Methods:
    // Konvertiert einen Namen eines Knotens oder einer Challenge in einen gültigen Dateinamen durch Weglassen ungültiger Zeichen.
    + ConvertToFileName (String name) : String static
    // Liefert einen Hash-Wert zu der durch filename spezifizierten Datei.
    + GetHash (String filename) : String

// Repräsentiert ein 3D-Modell in einer Spielwelt.
public class GameObjects.GameModel : IGameObject
  Attributes:
    // Die Transparenz des Modells.
    + Alpha : float
    // Die Farbe des Modells.
    + BaseColor : Color
    // Die Auswahlfarbe des Modells.
    + HightlightColor : Color
    // Die Intensität der Auswahlfarbe.
    + HighlightIntensity : float
    // Die Modellinformationen wie Position, Skalierung und der Dateiname des 3D-Modells.
    + Info : GameModelInfo
    // Die Klasse des XNA-Frameworks, die ein 3D-Modell repräsentiert.
    + Model : XNA.Model
    // Die Spielwelt, in der sich das 3D-Modell befindet.
    + World : World
    // Die Weltmatrix des 3D-Modells in der angegebenen Spielwelt.
    + WorldMatrix : Matrix
  Methods:
    // Gibt die Mitte des 3D-Modells zurück.
    + Center () : Vector3
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Zeichnet das 3D-Modell in der angegebenen Spielwelt mit dem aktuellen Rendereffekt der Spielwelt.
    + Draw (GameTime GameTime) : void
    // Überprüft, ob der Mausstrahl das 3D-Modell schneidet.
    + Intersects (Ray Ray) : GameObjectDistance
    // Erstellt ein neues 3D-Modell in dem angegebenen Spielzustand mit den angegebenen Modellinformationen.
    + GameModel (GameScreen screen, GameModelInfo info) : void

// Enthält Informationen über ein 3D-Modell wie den Dateinamen, die Rotation und die Skalierung.
public class GameObjects.GameModelInfo : GameObjectInfo
  Attributes:
    // Der Dateiname des Modells.
    + Modelname : String
    // Die Rotation des Modells.
    + Rotation : Angles3
    // Die Skalierung des Modells.
    + Scale : Vector3
  Methods:
    // Erstellt ein neues Informations-Objekt eines 3D-Modells mit den angegebenen Informationen zu
    // Dateiname, Rotation und Skalierung.
    + GameModelInfo (String modelname, Angles3 rotation, Vector3 scale) : void
    // 
    + GameModelInfo (String modelname) : void

// !!!
public class GameObjects.GameObjectDistance : 
  Attributes:
    // 
    + Object : IGameObject
    // 
    + Distance : float
  Methods:

// Enthält Informationen über ein 3D-Objekt wie die Position, Sichtbarkeit, Verschiebbarkeit und Auswählbarkeit.
public class GameObjects.GameObjectInfo : IEquatable<GameObjectInfo>
  Attributes:
    // Die Verschiebbarkeit des Spielobjektes.
    + IsMovable : Boolean
    // Die Auswählbarkeit des Spielobjektes.
    + IsSelectable : Boolean
    // Die Sichtbarkeit des Spielobjektes.
    + IsVisible : Boolean
    // Die Position des Spielobjektes.
    + Position : Vector3
  Methods:
    // Vergleicht zwei Informationsobjekte für Spielobjekte.
    // [parameters=GameObjectInfo other]
    + Equals (C other) : Boolean

// Ein Spielzustand, der zu einem angegebenen Spiel gehört und einen Inputhandler und Rendereffekte enthält.
public class Core.GameScreen : 
  Attributes:
    // Das Spiel, zu dem der Spielzustand gehört.
    + Game : Knot3Game
    // Der Inputhandler des Spielzustands.
    + Input : Input
    // Der aktuelle Postprocessing-Effekt des Spielzustands
    + PostProcessingEffect : RenderEffect
    // Ein Stack, der während dem Aufruf der Draw-Methoden der Spielkomponenten die jeweils aktuellen Rendereffekte enthält.
    + CurrentRenderEffects : RenderEffectStack
  Methods:
    // Beginnt mit dem Füllen der Spielkomponentenliste des XNA-Frameworks und fügt sowohl für Tastatur- als auch für
    // Mauseingaben einen Inputhandler für Widgets hinzu. Wird in Unterklassen von GameScreen reimplementiert und fügt zusätzlich weitere
    // Spielkomponenten hinzu.
    + Entered (GameScreen previousScreen, GameTime time) : void
    // Leert die Spielkomponentenliste des XNA-Frameworks.
    + BeforeExit (GameScreen nextScreen, GameTime time) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Erzeugt ein neues GameScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + GameScreen (Knot3Game game) : void
    // Fügt die angegebenen GameComponents in die Components-Liste des Games ein.
    + AddGameComponents (IGameScreenComponent[] components) : void
    // Entfernt die angegebenen GameComponents aus der Components-Liste des Games.
    + RemoveGameComponents (IGameScreenComponent[] components) : void

// Eine Spielkomponente, die in einem GameScreen verwendet wird und eine bestimmte Priorität hat.
public class Core.GameScreenComponent : XNA.GameComponent, IGameScreenComponent
  Attributes:
    // Die Zeichen- und Eingabepriorität.
    + Index : DisplayLayer
    // Der zugewiesene Spielzustand.
    + Screen : GameScreen
  Methods:
    // Gibt Spielkomponenten zurück, die in dieser Spielkomponente enthalten sind.
    // [returntype=IEnumerable<IGameScreenComponent>]
    + SubComponents (GameTime GameTime) : IEnumerable
    // Erzeugt eine neue Instanz eines GameScreenComponent-Objekts und initialisiert diese mit dem zugehörigen GameScreen und der zugehörigen Zeichenreihenfolge. Diese Spielkomponente kann nur in dem zugehörigen GameScreen verwendet werden.
    + GameScreenComponent (GameScreen screen, DisplayLayer index) : void

// Der Spielzustand, der die Grafik-Einstellungen darstellt.
public class Screens.GraphicsSettingsScreen : SettingsScreen
  Attributes:
    // Das Menü, das die Einstellungen enthält.
    - settingsMenu : VerticalMenu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erzeugt ein neues GraphicsSettingsScreen-Objekt und initialisiert dieses mit einem Knot3Game-Objekt.
    + GraphicsSettingsScreen (Knot3Game game) : void

// Eine horizontale Ausrichtung.
public enum Widgets.HorizontalAlignment
    // Links.
    Left=0
    // Mittig.
    Center=1
    // Rechts.
    Right=2

// Diese Schnittstelle enthält Methoden, die von Speicherformaten für Challenges implementiert werden müssen.
public interface KnotData.IChallengeIO : 
  Attributes:
  Methods:
    // Speichert eine Challenge.
    + Save (Challenge challenge) : void
    // Lädt eine Challenge.
    + Load (String filename) : Challenge
    // Lädt die Metadaten einer Challenge.
    + LoadMetaData (String filename) : ChallengeMetaData

// Diese Schnittstelle repräsentiert ein Spielobjekt und enthält eine Referenz auf die Spielwelt, in der sich dieses
// Game befindet, sowie Informationen zu dem Game.
public interface GameObjects.IGameObject : 
  Attributes:
    // Informationen über das Spielobjekt, wie z.B. die Position.
    + Info : GameObjectInfo
    // Eine Referenz auf die Spielwelt, in der sich das Spielobjekt befindet.
    + World : World
  Methods:
    // Die Mitte des Spielobjektes im 3D-Raum.
    + Center () : Vector3
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Zeichnet das Spielobjekt.
    + Draw (GameTime time) : void
    // Überprüft, ob der Mausstrahl das Spielobjekt schneidet.
    + Intersects (Ray ray) : GameObjectDistance

// Eine Schnittstelle für eine Spielkomponente, die in einem angegebenen Spielzustand verwendet wird und eine bestimmte Priorität hat.
public interface Core.IGameScreenComponent : XNA.IGameComponent
  Attributes:
    // Die Zeichen- und Eingabepriorität.
    + Index : DisplayLayer
    // Der zugewiesene Spielzustand.
    + Screen : GameScreen
  Methods:
    // Gibt Spielkomponenten zurück, die in dieser Spielkomponente enthalten sind.
    // [returntype=IEnumerable<IGameScreenComponent>]
    + SubComponents (GameTime time) : IEnumerable

// Repräsentiert einen Übergang zwischen zwei Kanten.
public interface GameObjects.IJunction : 
  Attributes:
    // Die Kante vor dem Übergang.
    + EdgeFrom : Edge
    // Die Kante nach dem Übergang.
    + EdgeTo : Edge
  Methods:

// Eine Schnittstelle, die von Klassen implementiert wird, welche auf Tastatureingaben reagieren.
public interface Core.IKeyEventListener : 
  Attributes:
    // Die Eingabepriorität.
    + Index : DisplayLayer
    // Zeigt an, ob die Klasse zur Zeit auf Tastatureingaben reagiert.
    + IsKeyEventEnabled : Boolean
    // Die Tasten, auf die die Klasse reagiert.
    + ValidKeys : List<Keys>
  Methods:
    // Die Reaktion auf eine Tasteneingabe.
    + OnKeyEvent () : void

// Diese Schnittstelle enthält Methoden, die von Speicherformaten für Knoten implementiert werden müssen.
public interface KnotData.IKnotIO : 
  Attributes:
    // Aufzählung der Dateierweiterungen.
    + FileExtensions : IEnumerable<string>
  Methods:
    // Speichert einen Knoten.
    + Save (Knot knot) : void
    // Lädt einen Knoten.
    + Load (String filename) : Knot
    // Lädt die Metadaten eines Knotens.
    + LoadMetaData (String filename) : KnotMetaData

// Eine Schnittstelle, die von Klassen implementiert wird, die auf Maus-Klicks reagieren.
public interface Core.IMouseEventListener : 
  Attributes:
    // Die Eingabepriorität.
    + Index : DisplayLayer
    // Ob die Klasse zur Zeit auf Mausklicks reagiert.
    + IsMouseEventEnabled : Boolean
  Methods:
    // Die Ausmaße des von der Klasse repräsentierten Objektes.
    + Bounds () : Rectangle
    // Die Reaktion auf einen Linksklick.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Die Reaktion auf einen Rechtsklick.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void

// Stellt für jeden Frame die Maus- und Tastatureingaben bereit. Daraus werden die nicht von XNA bereitgestellten Mauseingaben berechnet. Zusätzlich wird die aktuelle Eingabeaktion berechnet.
public class Core.Input : GameScreenComponent
  Attributes:
    // Enthält den Klickzustand der rechten Maustaste.
    + RightMouseButton : ClickState
    // Enthält den Klickzustand der linken Maustaste.
    + LeftMouseButton : ClickState
    // Enthält den Mauszustand von XNA zum aktuellen Frames.
    + CurrentMouseState : MouseState
    // Enthält den Tastaturzustand von XNA zum aktuellen Frames.
    + CurrentKeyboardState : KeyboardState
    // Enthält den Mauszustand von XNA zum vorherigen Frames.
    + PreviousMouseState : MouseState
    // Enthält den Tastaturzustand von XNA zum vorherigen Frames.
    + PreviousKeyboardState : KeyboardState
    // Gibt an, ob die Mausbewegung für Kameradrehungen verwendet werden soll.
    + GrabMouseMovement : Boolean
    // Gibt die aktuelle Eingabeaktion an, die von den verschiedenen Inputhandlern genutzt werden können.
    + CurrentInputAction : InputAction
  Methods:
    // Erstellt ein neues Input-Objekt, das an den übergebenen Spielzustand gebunden ist.
    + Input (GameScreen screen) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void

// 
public enum Core.InputAction
    // 
    None=0
    // 
    CameraTargetMove
    // 
    ArcballMove
    // 
    FreeMouse
    // 
    FirstPersonCameraMove
    // 
    SelectedObjectMove
    // 
    SelectedObjectShadowMove

// Ein Menüeintrag, der Texteingaben vom Spieler annimmt.
public class Widgets.InputItem : MenuItem
  Attributes:
    // Beinhaltet den vom Spieler eingegebenen Text.
    + InputText : String
  Methods:
    // Erzeugt ein neues InputItem-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angaben zur Zeichenreihenfolge und für evtl. bereits vor-eingetragenen Text Pflicht.
    + InputItem (GameScreen screen, DisplayLayer drawOrder, String text) : void

// Stellt eine Schnittstelle für Klassen bereit, die Rendereffekte ermöglichen.
public interface RenderEffects.IRenderEffect : 
  Attributes:
    // Das Rendertarget, in das zwischen dem Aufruf der Begin()- und der End()-Methode gezeichnet wird,
    // weil es in Begin() als primäres Rendertarget des XNA-Frameworks gesetzt wird.
    + RenderTarget : RenderTarget2D
  Methods:
    // In der Methode Begin() wird das aktuell von XNA genutzte Rendertarget auf einem Stapel gesichert
    // und das Rendertarget des Effekts wird als aktuelles Rendertarget gesetzt.
    + Begin (GameTime) : void
    // Das auf dem Stapel gesicherte, vorher genutzte Rendertarget wird wiederhergestellt und
    // das Rendertarget dieses Rendereffekts wird, unter Umständen in Unterklassen verändert,
    // auf dieses ubergeordnete Rendertarget gezeichnet.
    + End (GameTime) : void
    // 
    + DrawModel (GameModel model, GameTime time) : void
    // Beim Laden des Modells wird von der XNA-Content-Pipeline jedem ModelMeshPart ein Shader der Klasse
    // BasicEffect zugewiesen. Für die Nutzung des Modells in diesem Rendereffekt kann jedem ModelMeshPart
    // ein anderer Shader zugewiesen werden.
    + RemapModel (GameModel model) : void

// Der Zustand eines Menüeintrags.
public enum Widgets.ItemState
    // Ausgewählt.
    Selected=1
    // Die Maus wurde direkt über den Menüeintrag navigiert und verweilt dort.
    Hovered=2
    // Ein undefinierter Zustand.
    None=0

// Ein Menüeintrag, der einen Tastendruck entgegennimmt und in der enthaltenen Option als Zeichenkette speichert.
public class Widgets.KeyInputItem : InputItem
  Attributes:
    // Die Option in einer Einstellungsdatei.
    - option : OptionInfo
  Methods:
    // Speichert die aktuell gedrückte Taste in der Option.
    + OnKeyEvent () : void
    // Erzeugt ein neues CheckBoxItem-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angaben zur Zeichenreihenfolge und der Eingabeoption Pflicht.
    + KeyInputItem (GameScreen screen, DisplayLayer drawOrder, OptionInfo option) : void

// Diese Klasse repräsentiert einen Knoten, bestehend aus einem Knoten-Metadaten-Objekt und einer doppelt-verketteten Liste von Kanten. Ein Knoten ist eine zyklische Kantenfolge, bei der keine zwei Kanten Kanten den gleichen Raum einnehmen.
public class KnotData.Knot : ICloneable, IEnumerable<Edge>, IEquatable<Knot>
  Attributes:
    // Der Name des Knotens, welcher auch leer sein kann.
    // Beim Speichern muss der Nutzer in diesem Fall zwingend einen nichtleeren Namen wählen.
    // Der Wert dieser Eigenschaft wird aus der \glqq Name\grqq~-Eigenschaft des Metadaten-Objektes geladen
    // und bei Änderungen wieder in diesem gespeichert.
    // Beim Ändern dieser Eigenschaft wird automatisch auch der im Metadaten-Objekt enthaltene Dateiname verändert.
    + Name : String
    // Das Startelement der doppelt-verketteten Liste, in der die Kanten gespeichert werden.
    - edges : Circle
    // Die Metadaten des Knotens.
    + MetaData : KnotMetaData
    // Ein Ereignis, das in der Move-Methode ausgelöst wird, wenn sich die Struktur der Kanten geändert hat.
    + EdgesChanged : Action
    // Enthält die aktuell vom Spieler selektierten Kanten in der Reihenfolge, in der sie selektiert wurden.
    + SelectedEdges : IEnumerable<Edge>
  Methods:
    // Erstellt einen minimalen Standardknoten. Das Metadaten-Objekt enthält in den Eigenschaften,
    // die das Speicherformat und den Dateinamen beinhalten, den Wert \glqq null\grqq.
    + Knot () : void
    // Erstellt einen neuen Knoten mit dem angegebenen Metadaten-Objekt und den angegebenen Kanten,
    // die in der doppelt verketteten Liste gespeichert werden.
    // Die Eigenschaft des Metadaten-Objektes, die die Anzahl der Kanten enthält,
    // wird auf ein Delegate gesetzt, welches jeweils die aktuelle Anzahl der Kanten dieses Knotens zurückgibt.
    + Knot (KnotMetaData meta, IEnumerable<Edge> edges) : void
    // Prüft, ob eine Verschiebung der aktuellen Kantenauswahl in die angegebene Richtung um die angegebene Distanz gültig ist.
    + IsValidMove (Direction dir, Integer distance) : Boolean
    // Verschiebt die aktuelle Kantenauswahl in die angegebene Richtung um die angegebene Distanz.
    + Move (Direction dir, Integer distance) : Boolean
    // Gibt die doppelt-verkettete Kantenliste als Enumerator zurück.
    + GetEnumerator () : IEnumerator<Edge>
    // Speichert den Knoten unter dem Dateinamen in dem Dateiformat, das in dem Metadaten-Objekt angegeben ist.
    // Enthalten entweder die Dateiname-Eigenschaft, die Dateiformat-Eigenschaft
    // oder beide den Wert \glqq null\grqq, dann wird eine IOException geworfen.
    + Save () : void
    // Erstellt eine vollständige Kopie des Knotens, inklusive der Kanten-Datenstruktur und des Metadaten-Objekts.
    + Clone () : Object
    // Fügt die angegebene Kante zur aktuellen Kantenauswahl hinzu.
    + AddToSelection (Edge edge) : void
    // Entfernt die angegebene Kante von der aktuellen Kantenauswahl.
    + RemoveFromSelection (Edge edge) : void
    // Hebt die aktuelle Kantenauswahl auf.
    + ClearSelection () : void
    // Fügt alle Kanten auf dem kürzesten Weg zwischen der zuletzt ausgewählten Kante und der angegebenen Kante
    // zur aktuellen Kantenauswahl hinzu. Sind beide Wege gleich lang,
    // wird der Weg in Richtung der ersten Kante ausgewählt.
    + AddRangeToSelection (Edge edge) : void
    // Prüft, ob die angegebene Kante in der aktuellen Kantenauswahl enthalten ist.
    + IsSelected (Edge edge) : Boolean
    // Gibt die doppelt-verkettete Kantenliste als Enumerator zurück.
    // [name=IEnumerable.GetEnumerator]
    // [keywords= ]
    + GetEnumerator () : IEnumerator
    // Speichert den Knoten unter dem angegebenen Dateinamen in dem angegebenen Dateiformat.
    + Save (IKnotIO format, String filename) : void
    // Prüft, ob die räumliche Struktur identisch ist, unabhängig von dem Startpunkt und der Richtung der Datenstruktur.
    // [parameters=Knot other]
    + Equals (T other) : Boolean

// Die zentrale Spielklasse, die von der \glqq Game\grqq~-Klasse des XNA-Frameworks erbt.
public class Screens.Knot3Game : XNA.Game
  Attributes:
    // Wird dieses Attribut ausgelesen, dann gibt es einen Wahrheitswert zurück, der angibt,
    // ob sich das Spiel im Vollbildmodus befindet. Wird dieses Attribut auf einen Wert gesetzt,
    // dann wird der Modus entweder gewechselt oder beibehalten, falls es auf denselben Wert gesetzt wird.
    + IsFullScreen : Boolean
    // Enthält als oberste Element den aktuellen Spielzustand und darunter die zuvor aktiven Spielzustände.
    + Screens : Stack<GameScreen>
    // Dieses Attribut dient sowohl zum Setzen des Aktivierungszustandes der vertikalen Synchronisation,
    // als auch zum Auslesen dieses Zustandes.
    + VSync : Boolean
    // Der aktuelle Grafikgeräteverwalter des XNA-Frameworks.
    + Graphics : GraphicsDeviceManager
  Methods:
    // Erstellt ein neues zentrales Spielobjekt und setzt die Auflösung des BackBuffers auf
    // die in der Einstellungsdatei gespeicherte Auflösung oder falls nicht vorhanden auf die aktuelle
    // Bildschirmauflösung und wechselt in den Vollbildmodus.
    + Knot3Game () : void
    // Ruft die Draw()-Methode des aktuellen Spielzustands auf.
    + Draw (GameTime time) : void
    // Initialisiert die Attribute dieser Klasse.
    + Initialize () : void
    // Macht nichts. Das Freigeben aller Objekte wird von der automatischen Speicherbereinigung übernommen.
    + UnloadContent () : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void

// Implementiert das Speicherformat für Knoten.
public class KnotData.KnotFileIO : IKnotIO
  Attributes:
    // Die für eine Knoten-Datei gültigen Dateiendungen.
    + FileExtensions : IEnumerable<string>
  Methods:
    // Erstellt ein KnotFileIO-Objekt.
    + KnotFileIO () : void
    // Speichert einen Knoten in dem Dateinamen, der in dem Knot-Objekt enthalten ist.
    + Save (Knot knot) : void
    // Lädt eines Knotens aus einer angegebenen Datei.
    + Load (String filename) : Knot
    // Lädt die Metadaten eines Knotens aus einer angegebenen Datei.
    + LoadMetaData (String filename) : KnotMetaData

// Verarbeitet die Maus- und Tastatureingaben des Spielers und modifiziert die Kamera-Position
// und das Kamera-Ziel.
public class GameObjects.KnotInputHandler : GameScreenComponent
  Attributes:
    // Die Spielwelt.
    - world : World
    // Der Spielzustand.
    - screen : GameScreen
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Erstellt einen neuen KnotInputHandler für den angegebenen Spielzustand und die angegebene Spielwelt.
    // [base=screen]
    + KnotInputHandler (GameScreen screen, World world) : void

// Enthält Metadaten eines Knotens, die aus einer Spielstand-Datei schneller eingelesen werden können,
// als der vollständige Knoten. Dieses Objekt enthält keine Datenstruktur zur Repräsentation der Kanten,
// sondern nur Informationen über den Namen des Knoten und die Anzahl seiner Kanten. Es kann ohne ein
// dazugehöriges Knoten-Objekt existieren, aber jedes Knoten-Objekt enthält genau ein Knoten-Metadaten-Objekt.
public class KnotData.KnotMetaData : 
  Attributes:
    // Der Anzeigename des Knotens, welcher auch leer sein kann.
    // Beim Speichern muss der Spieler in diesem Fall zwingend
    // einen nichtleeren Namen wählen. Wird ein neuer Anzeigename festgelegt,
    // dann wird der Dateiname ebenfalls auf einen neuen Wert gesetzt, unabhängig davon
    // ob er bereits einen Wert enthält oder \glqq null\grqq~ist.
    // Diese Eigenschaft kann öffentlich gelesen und gesetzt werden.
    + Name : String
    // Das Format, aus dem die Metadaten geladen wurden.
    // Es ist genau dann \glqq null\grqq, wenn die Metadaten nicht aus einer Datei gelesen wurden. Nur lesbar.
    + Format : IKnotIO
    // Ein Delegate, das die Anzahl der Kanten zurückliefert.
    // Falls dieses Metadaten-Objekt Teil eines Knotens ist, gibt es dynamisch die Anzahl der
    // Kanten des Knoten-Objektes zurück. Anderenfalls gibt es eine statische Zahl zurück,
    // die beim Einlesen der Metadaten vor dem Erstellen dieses Objektes gelesen wurde. Nur lesbar.
    + CountEdges : Func<Integer>
    // Falls die Metadaten aus einer Datei eingelesen wurden, enthält dieses Attribut den Dateinamen,
    // sonst \glqq null\grqq.
    + Filename : String
  Methods:
    // Erstellt ein neues Knoten-Metadaten-Objekt mit einem angegebenen Knotennamen
    // und einer angegebenen Funktion, welche eine Kantenanzahl zurück gibt.
    // Zusätzlich wird der Dateiname oder das Speicherformat angegeben, aus dem die Metadaten gelesen wurden.
    + KnotMetaData (String name, Func<Integer> countEdges, IKnotIO format, String filename) : KnotMetaData
    // Erstellt ein neues Knoten-Metadaten-Objekt mit einem angegebenen Knotennamen
    // und einer angegebenen Funktion, welche eine Kantenanzahl zurück gibt.
    + KnotMetaData (String name, Func<Integer> countEdges) : KnotMetaData

// Erstellt aus einem Knoten-Objekt die zu dem Knoten gehörenden 3D-Modelle sowie die 3D-Modelle der Pfeile,
// die nach einer Auswahl von Kanten durch den Spieler angezeigt werden. Ist außerdem ein IGameObject und ein
// Container für die erstellten Spielobjekte.
public class GameObjects.KnotRenderer : IGameObject, IEnumerable<IGameObject>
  Attributes:
    // Enthält Informationen über die Position des Knotens.
    + Info : GameObjectInfo
    // Die Spielwelt, in der die 3D-Modelle erstellt werden sollen.
    + World : World
    // Die Liste der 3D-Modelle der Pfeile,
    // die nach einer Auswahl von Kanten durch den Spieler angezeigt werden.
    - arrows : List<ArrowModel>
    // Die Liste der 3D-Modelle der Kantenübergänge.
    - nodes : List<NodeModel>
    // Die Liste der 3D-Modelle der Kanten.
    - pipes : List<PipeModel>
    // Der Knoten, für den 3D-Modelle erstellt werden sollen.
    + Knot : Knot
    // Der Zwischenspeicher für die 3D-Modelle der Kanten. Hier wird das Fabrik-Entwurfsmuster verwendet.
    - pipeFactory : ModelFactory
    // Der Zwischenspeicher für die 3D-Modelle der Kantenübergänge. Hier wird das Fabrik-Entwurfsmuster verwendet.
    - nodeFactory : ModelFactory
    // Der Zwischenspeicher für die 3D-Modelle der Pfeile. Hier wird das Fabrik-Entwurfsmuster verwendet.
    - arrowFactory : ModelFactory
  Methods:
    // Gibt den Ursprung des Knotens zurück.
    + Center () : Vector3
    // Gibt immer \glqq null\grqq~zurück.
    + Intersects (Ray Ray) : GameObjectDistance
    // Wird mit dem EdgesChanged-Event des Knotens verknüft.
    + OnEdgesChanged () : void
    // Erstellt ein neues KnotRenderer-Objekt für den angegebenen Spielzustand mit den angegebenen
    // Spielobjekt-Informationen, die unter Anderem die Position des Knotenursprungs enthalten.
    + KnotRenderer (GameScreen screen, GameObjectInfo info) : void
    // Ruft die Update()-Methoden der Kanten, Übergänge und Pfeile auf.
    + Update (GameTime GameTime) : void
    // Ruft die Draw()-Methoden der Kanten, Übergänge und Pfeile auf.
    + Draw (GameTime GameTime) : void
    // Gibt einen Enumerator der aktuell vorhandenen 3D-Modelle zurück.
    // [returntype=IEnumerator<IGameObject>]
    + GetEnumerator () : IEnumerator

// Diese Klasse repräsentiert einen Parser für das Knoten-Austauschformat und enthält die
// eingelesenen Informationen wie den Namen des Knotens und die Kantenliste als Eigenschaften.
public class KnotData.KnotStringIO : 
  Attributes:
    // Der Name der eingelesenen Knotendatei oder des zugewiesenen Knotenobjektes.
    + Name : String
    // Die Kanten der eingelesenen Knotendatei oder des zugewiesenen Knotenobjektes.
    + Edges : IEnumerable<Edge>
    // Die Anzahl der Kanten der eingelesenen Knotendatei oder des zugewiesenen Knotenobjektes.
    + CountEdges : Integer
    // Erstellt aus den \glqq Name\grqq~- und \glqq Edges\grqq~-Eigenschaften einen neue Zeichenkette,
    // die als Dateiinhalt in einer Datei eines Spielstandes einen gültigen Knoten repräsentiert.
    + Content : String
  Methods:
    // Liest das in der angegebenen Zeichenkette enthaltene Dateiformat ein. Enthält es einen gültigen Knoten,
    // so werden die \glqq Name\grqq~- und \glqq Edges\grqq~-Eigenschaften auf die eingelesenen Werte gesetzt.
    // Enthält es einen ungültigen Knoten, so wird eine IOException geworfen und das Objekt wird nicht erstellt.
    + KnotStringIO (String content) : void
    // Erstellt ein neues Objekt und setzt die \glqq Name\grqq~- und \glqq Edge\grqq~-Eigenschaften auf die
    // im angegebenen Knoten enthaltenen Werte.
    + KnotStringIO (Knot knot) : void

// Eine statische Klasse, die Bezeichner in lokalisierten Text umsetzen kann.
public class Core.Localizer : 
  Attributes:
    // Die Datei, welche Informationen für die Lokalisierung enthält.
    - localization : ConfigFile static
  Methods:
    // Liefert zu dem übergebenen Bezeichner den zugehörigen Text aus der Lokalisierungsdatei der
    // aktuellen Sprache zurück, die dabei aus der Einstellungsdatei des Spiels gelesen wird.
    + Localize (String text) : String static

// Ein Menü enthält Bedienelemente zur Benutzerinteraktion. Diese Klasse bietet Standardwerte für
// Positionen, Größen, Farben und Ausrichtungen der Menüeinträge. Sie werden gesetzt, wenn die Werte
// der Menüeinträge \glqq null\grqq~sind.
public class Widgets.Menu : Widget, IEnumerable<MenuItem>
  Attributes:
    // Die von der Auflösung unabhängige Größe in Prozent.
    + RelativeItemSize : Func<int, Vector2>
    // Die von der Auflösung unabhängige Position in Prozent.
    + RelativeItemPosition : Func<int, Vector2>
    // Die vom Zustand des Menüeintrags abhängige Vordergrundfarbe des Menüeintrags.
    + ItemForegroundColor : Func<ItemState, Color>
    // Die vom Zustand des Menüeintrags abhängige Hintergrundfarbe des Menüeintrags.
    + ItemBackgroundColor : Func<ItemState, Color>
    // Die horizontale Ausrichtung der Menüeinträge.
    + ItemAlignX : HorizontalAlignment
    // Die vertikale Ausrichtung der Menüeinträge.
    + ItemAlignY : VerticalAlignment
  Methods:
    // Fügt einen Eintrag in das Menü ein. Falls der Menüeintrag \glqq null\grqq~oder leere Werte für
    // Position, Größe, Farbe oder Ausrichtung hat, werden die Werte mit denen des Menüs überschrieben.
    + Add (MenuItem item) : void
    // Entfernt einen Eintrag aus dem Menü.
    + Delete (MenuItem item) : void
    // Gibt einen Eintrag des Menüs zurück.
    + GetItem (Integer i) : MenuItem
    // Gibt die Anzahl der Einträge des Menüs zurück.
    + Size () : Integer
    // Gibt einen Enumerator über die Einträge des Menüs zurück.
    // [returntype=IEnumerator<MenuItem>]
    + GetEnumerator () : IEnumerator
    // Erzeugt ein neues Menu-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem ist die Angabe der Zeichenreihenfolge Pflicht.
    + Menu (GameScreen screen, DisplayLayer drawOrder) : void

// Eine Schaltfläche, der eine Zeichenkette anzeigt und auf einen Linksklick reagiert.
public class Widgets.MenuButton : MenuItem
  Attributes:
    // Die Aktion, die ausgeführt wird, wenn der Spieler auf die Schaltfläche klickt.
    + OnClick : Action
  Methods:
    // Erzeugt ein neues MenuButton-Objekt und initialisiert dieses mit dem zugehörigen GameScreen-Objekt.
    // Zudem sind Angabe der Zeichenreihenfolge, einer Zeichenkette für den Namen der Schaltfläche
    // und der Aktion, welche bei einem Klick ausgeführt wird Pflicht.
    + MenuButton (GameScreen screen, DisplayLayer drawOrder, String name, Action onClick) : void

// Ein abstrakte Klasse für Menüeinträge, die
public class Widgets.MenuItem : Widget, IKeyEventListener, IMouseEventListener
  Attributes:
    // Gibt an, ob die Maus sich über dem Eintrag befindet, ohne ihn anzuklicken, ob er ausgewählt ist
    // oder nichts von beidem.
    + ItemState : ItemState
    // Die Zeichenreihenfolge.
    + ItemOrder : Integer
    // Der Anzeigetext der Schaltfläche.
    + Text : String
  Methods:
    // Reaktionen auf einen Linksklick.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Reaktionen auf einen Rechtsklick.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void
    // Reaktionen auf Tasteneingaben.
    + OnKeyEvent () : void
    // Gibt die Ausmaße des Eintrags zurück.
    + Bounds () : Rectangle

// Eine abstrakte Klasse, von der alle Spielzustände erben, die Menüs darstellen.
public class Screens.MenuScreen : GameScreen
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Wird aufgerufen, wenn in diesen Spielzustand gewechselt wird.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Ein Zwischenspeicher für 3D-Modelle.
public class GameObjects.ModelFactory : 
  Attributes:
    // Die Zuordnung zwischen den Modellinformationen zu den 3D-Modellen.
    - cache : Dictionary<GameModelInfo, GameModel>
    // Ein Delegate, das beim Erstellen eines Zwischenspeichers zugewiesen wird und aus den
    // angegebenen Modellinformationen und dem angegebenen Spielzustand ein 3D-Modell erstellt.
    - createModel : Func<GameScreen, GameModelInfo, GameModel>
  Methods:
    // Falls das 3D-Modell zwischengespeichert ist, wird es zurückgegeben, sonst mit createModel() erstellt.
    + this (GameScreen state, GameModelInfo info) : GameModel
    // Erstellt einen neuen Zwischenspeicher.
    + ModelFactory (GameModelInfo, GameModel>, Func<GameScreen createModel) : void

// Ein Inputhandler, der Mauseingaben auf 3D-Modellen verarbeitet.
public class GameObjects.ModelMouseHandler : GameScreenComponent
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Erzeugt eine neue Instanz eines ModelMouseHandler-Objekts und ordnet dieser ein GameScreen-Objekt screen zu,
    // sowie eine Spielwelt world.
    + ModelMouseHandler (GameScreen screen, World world) : void

// Repräsentiert einen Mauszeiger.
public class Core.MousePointer : DrawableGameScreenComponent
  Attributes:
  Methods:
    // Erstellt einen neuen Mauszeiger für den angegebenen Spielzustand.
    + MousePointer (GameScreen screen) : void
    // Zeichnet den Mauszeiger.
    + Draw (GameTime time) : void

// 
public class KnotData.Node : 
  Attributes:
    // 
    + X : Integer
    // 
    + Y : Integer
    // 
    + Z : Integer
    // 
    - scale : Integer
  Methods:
    // 
    + ToVector () : Vector3
    // Erzeugt eine neue Instanz eines Node-Objekts und initialisiert diese mit Werten
    // für die x-, y- und z-Koordinate.
    + Node (Integer x, Integer y, Integer z) : void

// Eine Zuordnung zwischen Kanten und Kantenübergänge.
public class KnotData.NodeMap : 
  Attributes:
    // 
    + Scale : Integer
  Methods:
    // Gibt den Übergang am Anfang der Kante zurück.
    + From (Edge edge) : Node
    // Gibt den Übergang am Ende der Kante zurück.
    + To (Edge edge) : Node
    // Aktualisiert die Zuordnung, wenn sich die Kanten geändert haben.
    + OnEdgesChanged () : void

// Ein 3D-Modell, das einen Kantenübergang darstellt.
public class GameObjects.NodeModel : GameModel
  Attributes:
    // Enthält Informationen über den darzustellende 3D-Modell des Kantenübergangs.
    + Info : NodeModelInfo
  Methods:
    // Erstellt ein neues 3D-Modell mit dem angegebenen Spielzustand und dem angegebenen Informationsobjekt.
    // [base=screen, info]
    + NodeModel (GameScreen screen, NodeModelInfo info) : void
    // Zeichnet das 3D-Modell mit dem aktuellen Rendereffekt.
    + Draw (GameTime GameTime) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void

// Enthält Informationen über ein 3D-Modell, das einen Kantenübergang darstellt.
public class GameObjects.NodeModelInfo : GameModelInfo, IJunction
  Attributes:
    // Die Kante vor dem Übergang.
    + EdgeFrom : Edge
    // Die Kante nach dem Übergang.
    + EdgeTo : Edge
    // Der Knoten, der die Kanten enthält.
    + Knot : Knot
    // Die Position des Übergangs.
    + Position : Vector3
  Methods:
    // Erstellt ein neues Informationsobjekt für ein 3D-Modell, das einen Kantenübergang darstellt.
    // [base="node1", Angles3.Zero, new Vector3(1,1,1)]
    + NodeModelInfo (Knot knot, Edge from, Edge to) : void

// Enthält Informationen über einen Eintrag in einer Einstellungsdatei.
public class Core.OptionInfo : 
  Attributes:
    // Die Einstellungsdatei.
    - configFile : ConfigFile
    // Der Abschnitt der Einstellungsdatei.
    + Section : String
    // Der Name der Option.
    + Name : String
    // Der Standardwert der Option.
    + DefaultValue : String
    // Der Wert der Option.
    + Value : String
  Methods:
    // Erstellt ein neues OptionsInfo-Objekt aus den übergegebenen Werten.
    + OptionInfo (String section, String name, String defaultValue, ConfigFile configFile) : void

// Eine statische Klasse, die eine Referenz auf die zentrale Einstellungsdatei des Spiels enthält.
public class Core.Options : 
  Attributes:
    // Die zentrale Einstellungsdatei des Spiels.
    + Default : ConfigFile static
  Methods:

// Pausiert ein Spieler im Creative- oder Challenge-Modus das Spiel,
// wird dieser Dialog über anderen Spielkomponenten angezeigt.
public class Widgets.PauseDialog : Dialog
  Attributes:
    // Das Menü, das verschiedene Schaltflächen enthält.
    - pauseMenu : VerticalMenu
  Methods:

// Ein 3D-Modell, das eine Kante darstellt.
public class GameObjects.PipeModel : GameModel
  Attributes:
    // Enthält Informationen über die darzustellende Kante.
    + Info : PipeModelInfo
  Methods:
    // Prüft, ob der angegebene Mausstrahl das 3D-Modell schneidet.
    + Intersects (Ray ray) : GameObjectDistance
    // Erstellt ein neues 3D-Modell mit dem angegebenen Spielzustand und den angegebenen Spielinformationen.
    // [base=screen, info]
    + PipeModel (GameScreen screen, PipeModelInfo info) : void

// Enthält Informationen über ein 3D-Modell, das eine Kante darstellt.
public class GameObjects.PipeModelInfo : GameModelInfo
  Attributes:
    // Die Kante, die durch das 3D-Modell dargestellt wird.
    + Edge : Edge
    // Der Knoten, der die Kante enthält.
    + Knot : Knot
    // Die Position, an der die Kante beginnt.
    + PositionFrom : Vector3
    // Die Position, an der die Kante endet.
    + PositionTo : Vector3
  Methods:
    // Erstellt ein neues Informationsobjekt für ein 3D-Modell, das eine Kante darstellt.
    // [base="pipe1", Angles3.Zero, new Vector3(10,10,10)]
    + PipeModelInfo (Knot knot, Edge edge) : void

// Ein Exportformat für 3D-Drucker.
public class KnotData.PrinterIO : IKnotIO
  Attributes:
    // Die gültigen Dateiendungen für das 3D-Drucker-Format.
    + FileExtensions : IEnumerable<string>
  Methods:
    // Erstellt ein neues PrinterIO-Objekt.
    + PrinterIO () : void
    // Exportiert den Knoten in einem gültigen 3D-Drucker-Format.
    + Save (Knot knot) : void
    // Gibt eine IOException zurück.
    + Load (String filename) : Knot
    // Gibt eine IOException zurück.
    + LoadMetaData (String filename) : KnotMetaData

// Der Spielzustand, der die Profil-Einstellungen darstellt.
public class Screens.ProfileSettingsScreen : SettingsScreen
  Attributes:
    // !!!
    - settingsMenu : VerticalMenu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erzeugt eine neue Instanz eines ProfileSettingsScreen-Objekts und initialisiert dieses mit einem Knot3Game-Objekt.
    + ProfileSettingsScreen (Knot3Game game) : void

// Eine abstrakte Klasse, die eine Implementierung von IRenderEffect darstellt.
public class RenderEffects.RenderEffect : IRenderEffect
  Attributes:
    // Das Rendertarget, in das zwischen dem Aufruf der Begin()- und der End()-Methode gezeichnet wird,
    // weil es in Begin() als primäres Rendertarget des XNA-Frameworks gesetzt wird.
    + RenderTarget : RenderTarget2D
    // Der Spielzustand, in dem der Effekt verwendet wird.
    # screen : GameScreen
    // Ein Spritestapel, der verwendet wird, um das Rendertarget dieses Rendereffekts auf das übergeordnete Rendertarget zu zeichnen.
    # spriteBatch : SpriteBatch
  Methods:
    // In der Methode Begin() wird das aktuell von XNA genutzte Rendertarget auf einem Stack gesichert
    // und das Rendertarget des Effekts wird als aktuelles Rendertarget gesetzt.
    + Begin (GameTime) : void
    // Das auf dem Stack gesicherte, vorher genutzte Rendertarget wird wiederhergestellt und
    // das Rendertarget dieses Rendereffekts wird, unter Umständen in Unterklassen verändert,
    // auf dieses ubergeordnete Rendertarget gezeichnet.
    + End (GameTime) : void
    // 
    + DrawModel (GameModel GameModel, GameTime GameTime) : void
    // Beim Laden des Modells wird von der XNA-Content-Pipeline jedem ModelMeshPart ein Shader der Klasse
    // BasicEffect zugewiesen. Für die Nutzung des Modells in diesem Rendereffekt kann jedem ModelMeshPart
    // ein anderer Shader zugewiesen werden.
    + RemapModel (GameModel GameModel) : void
    // !!!
    # DrawRenderTarget (GameTime time) : void

// Ein Stapel, der während der Draw-Aufrufe die Hierarchie der aktuell verwendeten Rendereffekte verwaltet
// und automatisch das aktuell von XNA verwendete Rendertarget auf das Rendertarget des obersten Rendereffekts
// setzt.
public class RenderEffects.RenderEffectStack : 
  Attributes:
    // Der oberste Rendereffekt.
    + CurrentEffect : IRenderEffect
    // Der Standard-Rendereffekt, der verwendet wird, wenn der Stapel leer ist.
    - DefaultEffect : IRenderEffect
  Methods:
    // Entfernt den obersten Rendereffekt vom Stapel.
    + Pop () : IRenderEffect
    // Legt einen Rendereffekt auf den Stapel.
    + Push (IRenderEffect effect) : void
    // Erstellt einen neuen Rendereffekt-Stapel.
    + RenderEffectStack (IRenderEffect defaultEffect) : void

// Ein Dialog, der angezeigt wird, wenn der Spieler einen Knoten speichern will.
public class Widgets.SaveDialog : TextInputDialog
  Attributes:
  Methods:

// Ein Spielzustand, der das Haupt-Einstellungsmenü zeichnet.
public class Screens.SettingsScreen : MenuScreen
  Attributes:
    // 
    - navigationMenu : VerticalMenu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Haupt-Einstellungsmenü in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime time) : void

// Die 3D-Modelle, die während einer Verschiebung von Kanten die Vorschaumodelle repräsentieren.
public class GameObjects.ShadowGameModel : ShadowGameObject
  Attributes:
    // Die Farbe der Vorschaumodelle.
    + ShadowColor : Color
    // Die Transparenz der Vorschaumodelle.
    + ShadowAlpha : float
  Methods:
    // Erstellt ein neues Vorschaumodell in dem angegebenen Spielzustand für das angegebene zu dekorierende Modell.
    + ShadowGameModel (GameScreen sreen, GameModel decoratedModel) : void
    // Zeichnet das Vorschaumodell.
    + Draw (GameTime GameTime) : void

// Eine abstrakte Klasse, die ein Vorschau-Spielobjekt darstellt.
public class GameObjects.ShadowGameObject : IGameObject
  Attributes:
    // Enthält Informationen über das Vorschau-Spielobjekt.
    + Info : GameObjectInfo
    // Eine Referenz auf die Spielwelt, in der sich das Spielobjekt befindet.
    + World : World
    // Die Position, an der das Vorschau-Spielobjekt gezeichnet werden soll.
    + ShadowPosition : Vector3
    // Die Position, an der sich das zu dekorierende Objekt befindet.
    + OriginalPosition : Vector3
  Methods:
    // Die Position, an der das Vorschau-Spielobjekt gezeichnet werden soll.
    + Center () : Vector3
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Zeichnet das Vorschau-Spielobjekt.
    + Draw (GameTime GameTime) : void
    // Prüft, ob der angegebene Mausstrahl das Vorschau-Spielobjekt schneidet.
    + Intersects (Ray Ray) : GameObjectDistance
    // Erstellt ein neues Vorschauobjekt in dem angegebenen Spielzustand für das angegebene zu dekorierende Objekt.
    + ShadowGameObject (GameScreen screen, IGameObject decoratedObj) : void

// Ein Menüeintrag, der einen Schieberegler bereitstellt, mit dem man einen Wert zwischen einem minimalen
// und einem maximalen Wert über Verschiebung einstellen kann.
public class Widgets.SliderItem : MenuItem
  Attributes:
    // Der aktuelle Wert.
    + Value : Integer
    // Der minimale Wert.
    + MinValue : Integer
    // Der maximale Wert.
    + MaxValue : Integer
    // Schrittweite zwischen zwei einstellbaren Werten.
    + Step : Integer
  Methods:
    // Erzeugt eine neue Instanz eines SliderItem-Objekts und initialisiert diese
    // mit dem zugehörigen GameScreen-Objekt. Zudem ist die Angabe der Zeichenreihenfolge,
    // einem minimalen einstellbaren Wert, einem maximalen einstellbaren Wert und einem Standardwert Pflicht.
    + SliderItem (GameScreen screen, DisplayLayer drawOrder, Integer max, Integer min, Integer step, Integer value) : void

// Ein Rendereffekt, der 3D-Modelle mit dem von der XNA-Content-Pipeline standardmäßig zugewiesenen
// BasicEffect-Shader zeichnet und keinen Post-Processing-Effekt anwendet.
public class RenderEffects.StandardEffect : RenderEffect
  Attributes:
  Methods:
    // !!!
    # DrawRenderTarget (GameTime GameTime) : void
    // Erstellt einen neuen Standardeffekt.
    + StandardEffect (GameScreen screen) : void

// Der Startbildschirm.
public class Screens.StartScreen : MenuScreen
  Attributes:
    // Die Schaltflächen des Startbildschirms.
    - buttons : Menu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt die das Menü in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Erzeugt eine neue Instanz eines StartScreen-Objekts und initialisiert diese mit einem Knot3Game-Objekt.
    + StartScreen (Knot3Game game) : void

// Ein Dialog, der eine Texteingabe des Spielers entgegennimmt.
public class Widgets.TextInputDialog : ConfirmDialog
  Attributes:
    // Der Text, der durch den Spieler eingegeben wurde.
    + InputText : String
  Methods:
    // Erzeugt eine neue Instanz eines TextInputDialog-Objekts und ordnet dieser einen GameScreen zu.
    // Zudem ist die Angabe der Zeichenreihenfolge, einer Zeichenkette für den Titel, einer Zeichenfolge
    // für den eingeblendeten Text und eine Zeichenkette für voreingestellten Text (welche leer sein darf) Pflicht.
    + TextInputDialog (GameScreen screen, DisplayLayer drawOrder, String title, String text, String inputText) : void

// Eine Einführung in das Spielen von Challenges.
// Der Spieler wird dabei durch Anweisungen an das Lösen von Challenges herangeführt.
public class Screens.TutorialChallengeModeScreen : ChallengeModeScreen
  Attributes:
  Methods:
    // !!!
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Die vertikale Ausrichtung.
public enum Widgets.VerticalAlignment
    // Oben.
    Top=1
    // Mittig.
    Center=0
    // Unten.
    Bottom=2

// Ein Menü, das alle Einträge vertikal anordnet.
public class Widgets.VerticalMenu : Menu
  Attributes:
  Methods:
    // Ordnet die Einträge vertikal an.
    + AlignItems () : void
    // Erzeugt eine neue Instanz eines VerticalMenu-Objekts und initialisiert diese mit dem zugehörigen GameScreen-Objekt.
    // Zudem ist die Angaben der Zeichenreihenfolge Pflicht.
    + VerticalMenu (GameScreen screen, DisplayLayer drawOrder) : void

// Eine abstrakte Klasse, von der alle Element der grafischen Benutzeroberfläche erben.
public class Widgets.Widget : DrawableGameScreenComponent
  Attributes:
    // Die von der Auflösung unabhängige Größe in Prozent.
    + RelativeSize : Vector2
    // Die von der Auflösung unabhängige Position in Prozent.
    + RelativePosition : Vector2
    // Gibt an, ob das grafische Element sichtbar ist.
    + IsVisible : bool
    // Die Hintergrundfarbe.
    + BackgroundColor : Func<Color>
    // Die Vordergrundfarbe.
    + ForegroundColor : Func<Color>
    // Die horizontale Ausrichtung.
    + AlignX : HorizontalAlignment
    // Die vertikale Ausrichtung.
    + AlignY : VerticalAlignment
  Methods:
    // Die Ausmaße des grafischen Elements
    + BoundingBox () : Rectangle
    // Erstellt ein neues grafisches Benutzerschnittstellenelement in dem angegebenen Spielzustand
    // mit der angegebenen Zeichenreihenfolge.
    + Widget (GameScreen screen, DisplayLayer drawOrder) : void

// Ein Inputhandler, der Tastatureingaben auf Widgets verarbeitet.
public class Widgets.WidgetKeyHandler : GameScreenComponent
  Attributes:
  Methods:
    // !!!
    + Update () : void

// Ein Inputhandler, der Mauseingaben auf Widgets verarbeitet.
public class Widgets.WidgetMouseHandler : GameScreenComponent
  Attributes:
  Methods:
    // !!!
    + Update () : void

// Repräsentiert eine Spielwelt, in der sich 3D-Modelle befinden und gezeichnet werden können.
public class Core.World : DrawableGameScreenComponent, IEnumerable<IGameObject>
  Attributes:
    // Die Kamera dieser Spielwelt.
    + Camera : Camera
    // Die Liste von Spielobjekten.
    + Objects : List<IGameObject>
    // Das aktuell ausgewählte Spielobjekt.
    + SelectedObject : IGameObject
    // Der aktuell angewendete Rendereffekt.
    + CurrentEffect : IRenderEffect
  Methods:
    // Ruft auf allen Spielobjekten die Update()-Methode auf.
    + Update (GameTime GameTime) : void
    // Ruft auf allen Spielobjekten die Draw()-Methode auf.
    + Draw (GameTime GameTime) : void
    // Erstellt eine neue Spielwelt im angegebenen Spielzustand.
    + World (GameScreen screen) : void
    // Liefert einen Enumerator über die Spielobjekte dieser Spielwelt.
    // [returntype=IEnumerator<IGameObject>]
    + GetEnumerator () : IEnumerator

