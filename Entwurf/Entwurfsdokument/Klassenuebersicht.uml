// Diese Klasse repräsentiert die Rotationswinkel der drei Achsen.
public class Angles3 : 
  Attributes:
    // Der Rotationswinkel um die X-Achse.
    + X : float
    // Der Rotationswinkel um die Y-Achse.
    + Y : float
    // Der Rotationswinkel um die Z-Achse.
    + Z : float
    // Eine statische Property mit dem Wert X = 0, Y = 0, Z = 0.
    + Zero : Angles3
  Methods:
    // Konvertiert Grad in Bogenmaß.
    + FromDegrees (float X, float Y, float Z) : Angles3
    // Konstruiert ein neues Angles3-Objekt mit drei gegebenen Winkeln.
    + Angles3 (float X, float Y, float Z) : void
    // Konvertiert Bogenmaß in Grad.
    + ToDegrees (float X, float Y, float Z) : void

// Diese Klasse repräsentiert ein 3D-Modell für einen Pfeil, der an selektierten Kanten erscheinen soll.
public class ArrowModel : 
  Attributes:
    // Das Info-Objekt, das die Position und Richtung des Pfeils enthält.
    + Info : ArrowModelInfo
  Methods:
    // Zeichnet den Pfeil.
    + Draw (GameTime GameTime) : void
    // Überprüft, ob der Mausstrahl den Pfeil schneidet.
    + Intersects (Ray ray) : GameObjectDistance
    // Erstellt ein neues Pfeilmodell in dem angegebenen GameScreen mit einem bestimmten Info-Objekt, das Position und Richtung des Pfeils festlegt.
    + ArrowModel (GameScreen screen, ArrowModelInfo info) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void

// Ein Objekt dieser Klasse hält alle Informationen, die zur Erstellung eines Pfeil-3D-Modelles (ArrowModel) notwendig sind.
public class ArrowModelInfo : 
  Attributes:
    // Die Richtung, die der Pfeil zeigen soll.
    + Direction : Vector3
  Methods:
    // Erstellt ein neues ArrowModelInfo-Objekt an einer bestimmten Position im 3D-Raum, das in eine bestimmte Richtung zeigt.
    + ArrowModelInfo (Vector3 position, Vector3 direction) : void

// Der Spielzustand, der die Audio-Einstellungen darstellt.
public class AudioSettingsScreen : 
  Attributes:
    // Das Menü, das die Einstellungen enthält.
    # settingsMenu : void
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Diese Klasse repräsentiert eine Option, welche die Werte \glqq Wahr\grqq~oder \glqq Falsch\grqq~annehmen kann.
public class BooleanOptionInfo : 
  Attributes:
    // Ein Property, das den aktuell abgespeicherten Wert zurückgibt.
    + Value : bool
  Methods:
    // Erstellt eine neue Option, welche die Werte \glqq Wahr\grqq~oder \glqq Falsch\grqq~annehmen kann. Mit dem angegebenen Namen, in dem
    // angegebenen Abschnitt der angegebenen Einstellungsdatei.
    + BooleanOptionInfo (String section, String name, String defaultValue, ConfigFile configFile) : void

// Jede Instanz der World-Klasse hält eine für diese Spielwelt verwendete Kamera als Attribut.
// Die Hauptfunktion der Kamera-Klasse ist das Berechnen der drei Matrizen, die für die Positionierung
// und Skalierung von 3D-Objekten in einer bestimmten Spielwelt benötigt werden, der View-, World- und Projection-Matrix.
// Um diese Matrizen zu berechnen, benötigt die Kamera unter Anderem Informationen über die aktuelle Kamera-Position,
// das aktuelle Kamera-Ziel und das Field of View.
public class Camera : 
  Attributes:
    // Die Position der Kamera.
    + Position : Vector3
    // Das Ziel der Kamera.
    + Target : Vector3
    // Das Sichtfeld.
    + FoV : float
    // Die View-Matrix wird über die statische Methode CreateLookAt der Klasse Matrix des XNA-Frameworks
    // mit Matrix.CreateLookAt (Position, Target, Vector3.Up) berechnet.
    + ViewMatrix : Matrix
    // Die World-Matrix wird mit Matrix.CreateFromYawPitchRoll und den drei Rotationswinkeln berechnet.
    + WorldMatrix : Matrix
    // Die Projektionsmatrix wird über die statische XNA-Methode Matrix.CreatePerspectiveFieldOfView berechnet.
    + ProjectionMatrix : Matrix
    // Eine Position, um die rotiert werden soll, wenn der User die rechte Maustaste gedrückt hält und die Maus bewegt.
    + ArcballTarget : Vector3
    // Berechnet ein Bounding-Frustum, das benötigt wird, um festzustellen, ob ein 3D-Objekt sich im Blickfeld des Spielers befindet.
    + ViewFrustum : BoundingFrustum
    // Eine Referenz auf die Spielwelt, für welche die Kamera zuständig ist.
    - World : World
    // Die Rotationswinkel.
    + Rotation : Angles3
  Methods:
    // Die Blickrichtung.
    + TargetDirection () : Vector3
    // Der Abstand zwischen der Kamera und dem Kamera-Ziel.
    + TargetDistance () : float
    // Erstellt eine neue Kamera in einem bestimmten GameScreen für eine bestimmte Spielwelt.
    + Camera (GameScreen screen, World world) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Berechnet einen Strahl für die angegebenene 2D-Mausposition.
    + GetMouseRay (Vector2 mousePosition) : Ray

// Ein Cel-Shading-Effekt.
public class CelShadingEffect : 
  Attributes:
  Methods:
    // 
    # DrawRenderTarget (GameTime GameTime) : void
    // Zeichnet ein 3D-Modell auf das Rendertarget.
    + DrawModel (GameTime, GameModel GameModel) : void
    // Weist dem 3D-Modell den Cel-Shader zu.
    + RemapModel (GameModel GameModel) : void
    // Erstellt einen neuen Cel-Shading-Effekt für den angegebenen GameScreen.
    + CelShadingEffect (GameScreen screen) : void

// Ein Objekt dieser Klasse repräsentiert eine Challenge.
public class Challenge : 
  Attributes:
    // Der Ausgangsknoten, den der Spieler in den Referenzknoten transformiert.
    + Start : Knot
    // Der Referenzknoten, in den der Spieler den Ausgangsknoten transformiert.
    + Target : Knot
    // Eine sortierte Bestenliste.
    - highscore : SortedList<Integer, String>
    // Das Speicherformat der Challenge.
    - format : IChallengeIO
    // Ein öffentlicher Enumerator, der die Bestenliste unabhängig von der darunterliegenden Datenstruktur zugänglich macht.
    + Highscore : IEnumerator<KeyValuePair<String, Integer>>
    // Die Metadaten der Challenge.
    + MetaData : ChallengeMetaData
    // Der Name der Challenge.
    + Name : String
  Methods:
    // Erstellt ein Challenge-Objekt aus einem gegebenenen Challenge-Metadaten-Objekt.
    // Erstellt ein Challenge-Objekt aus einer gegebenenen Challenge-Datei.
    + Challenge (ChallengeMetaData meta, Knot start, Knot target) : void
    // Fügt eine neue Bestzeit eines bestimmten Spielers in die Bestenliste ein.
    + AddToHighscore (String name, Integer time) : void

// Implementiert das Speicherformat für Challenges.
public class ChallengeFileIO : 
  Attributes:
  Methods:
    // Erstellt ein ChallengeFileIO-Objekt.
    + ChallengeFileIO () : void
    // Speichert eine Challenge in dem Dateinamen, der in dem Challenge-Objekt enthalten ist.
    + Save (Challenge challenge) : void
    // Lädt eine Challenge aus einer angebenenen Datei.
    + Load (String filename) : Challenge
    // Lädt die Metadaten einer Challenge aus einer angegebenen Datei.
    + LoadMetaData (String filename) : ChallengeMetaData

// Der Spielzustand, der den Ladebildschirm für Challenges darstellt.
public class ChallengeLoadScreen : 
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Spielständen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Enthält Metadaten zu einer Challenge.
public class ChallengeMetaData : 
  Attributes:
    // Der Name der Challenge.
    + Name : String
    // Der Ausgangsknoten, den der Spieler in den Referenzknoten transformiert.
    + Start : KnotMetaData
    // Der Referenzknoten, in den der Spieler den Ausgangsknoten transformiert.
    + Target : KnotMetaData
    // Das Format, aus dem die Metadaten der Challenge gelesen wurden oder null.
    + Format : IChallengeIO
    // Der Dateiname, aus dem die Metadaten der Challenge gelesen wurden oder in den sie abgespeichert werden.
    + Filename : String
    // Ein öffentlicher Enumerator, der die Bestenliste unabhängig von der darunterliegenden Datenstruktur zugänglich macht.
    + Highscore : IEnumerator<KeyValuePair<String, Integer>>
  Methods:
    // Erstellt ein Challenge-Metadaten-Objekt mit einem gegebenen Namen und den Metadaten des Ausgangs- und Referenzknotens.
    + ChallengeMetaData (String name, KnotMetaData start, KnotMetaData target, String filename, IChallengeIO format) : void

// Der Spielzustand, der während dem Spielen einer Challenge aktiv ist und für den Ausgangs- und Referenzknoten je eine 3D-Welt zeichnet.
public class ChallengeModeScreen : 
  Attributes:
    // Der Spielerknoten, der durch die Transformation des Spielers aus dem Ausgangsknoten entsteht.
    + PlayerKnot : void
    // Der Referenzknoten.
    + ChallengeKnot : void
    // Die Spielwelt in der die 3D-Modelle des dargestellten Referenzknotens enthalten sind.
    - ChallengeWorld : World
    // Die Spielwelt in der die 3D-Modelle des dargestellten Spielerknotens enthalten sind.
    - PlayerWorld : World
    // Der Controller, der aus dem Referenzknoten die 3D-Modelle erstellt.
    - ChallengeKnotRenderer : KnotRenderer
    // Der Controller, der aus dem Spielerknoten die 3D-Modelle erstellt.
    - PlayerKnotRenderer : KnotRenderer
    // Der Inputhandler, der die Kantenverschiebungen des Spielerknotens durchführt.
    - PlayerKnotMovement : PipeMovement
    // Der Undo-Stack.
    + Undo : Stack<Knot>
    // Der Redo-Stack.
    + Redo : Stack<Knot>
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt die 3D-Welten und den Inputhandler in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Ein Menüeintrag, der einen Auswahlkasten darstellt.
public class CheckBoxItem : 
  Attributes:
    // Die Option, die mit dem Auswahlkasten verknüft ist.
    - option : BooleanOptionInfo
  Methods:
    // Erstellt einen Menüeintrag für die angegebene Option.
    + CheckBoxItem (BooleanOptionInfo option) : void

// Eine doppelt verkettete Liste.
public class Circle : 
  Attributes:
    // Der Wert dieses Listeneintrags.
    + Content : T
    // Der nächste Listeneintrag.
    + Next : Circle
    // Der vorherige Listeneintrag.
    + Previous : Circle
  Methods:
    // Entfernt diesen Listeneintrag und verknüft den vorherigen mit dem nächsten Eintrag.
    + Remove () : void
    // Erstellt einen neuen Listeneintrag.
    + Circle (T content) : void
    // Fügt nach diesem Listeneintrag einen neuen Listeneintrag ein.
    + InsertAfter (T next) : void
    // Fügt vor diesem Listeneintrag einen neuen Listeneintrag ein.
    + InsertBefore (T previous) : void
    // Gibt einen Enumerator über die Liste zurück.
    + GetEnumerator () : IEnumerator<T>
    // Gibt einen Enumerator über die Liste zurück.
    + GetEnumerator () : IEnumerator

// Eine Wertesammlung der möglichen Klickzustände einer Maustaste.
public enum ClickState
    // 
    None=0
    // 
    SingleClick=1
    // 
    DoubleClick=2

// Ein Steuerelement der grafischen Benutzeroberfläche, das eine Auswahl von Farben ermöglicht.
public class ColorPicker : 
  Attributes:
    // Die ausgewählte Farbe.
    + Color : Color
  Methods:
    // Reagiert auf Tastatureingaben.
    + OnKeyEvent () : void
    // Gibt die Ausmaße des ColorPickers zurück.
    + Bounds () : Rectangle
    // Bei einem Linksklick wird eine Farbe ausgewählt und im Attribut Color abgespeichert.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Bei einem Rechtsklick geschieht nichts.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void

// Ein Menüeintrag, der eine aktuelle Farbe anzeigt und zum Ändern der Farbe per Mausklick einen ColorPicker öffnet.
public class ColorPickItem : 
  Attributes:
    // Die aktuelle Farbe.
    + Color : Color
    // Der ColorPicker, der bei einem Mausklick auf den Menüeintrag geöffnet wird.
    - picker : ColorPicker
  Methods:

// Repräsentiert eine Einstellungsdatei.
public class ConfigFile : 
  Attributes:
  Methods:
    // Setzt den Wert der Option mit dem angegebenen Namen in den angegebenen Abschnitt auf den angegebenen Wert.
    + SetOption (String section, String option, String value) : void
    // Gibt den aktuell in der Datei vorhandenen Wert für die angegebene Option in dem angegebenen Abschnitt zurück.
    + GetOption (String section, String option, Boolean defaultValue) : Boolean
    // Gibt den aktuell in der Datei vorhandenen Wert für die angegebene Option in dem angegebenen Abschnitt zurück.
    + GetOption (String section, String option, String defaultValue) : String
    // Setzt den Wert der Option mit dem angegebenen Namen in den angegebenen Abschnitt auf den angegebenen Wert.
    + SetOption (String section, String option, Boolean _value) : void

// Ein Dialog, der Schaltflächen zum Bestätigen einer Aktion anzeigt.
public class ConfirmDialog : 
  Attributes:
    // Das Menü, das Schaltflächen enthält.
    - buttons : Menu
  Methods:

// Der Spielzustand, der die Steuerungs-Einstellungen darstellt.
public class ControlSettingsScreen : 
  Attributes:
    // Das Menü, das die Einstellungen enthält.
    # settingsMenu : void
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Der Spielzustand, der den Ladebildschirm für Knoten darstellt.
public class CreativeLoadScreen : 
  Attributes:
  Methods:
    // Fügt das Menü mit dem Spielständen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void

// Der Spielzustand, der während dem Erstellen und Bearbeiten eines Knotens aktiv ist und für den Knoten eine 3D-Welt zeichnet.
public class CreativeModeScreen : 
  Attributes:
    // Der Knoten, der vom Spieler bearbeitet wird.
    + Knot : void
    // Die Spielwelt in der die 3D-Objekte des dargestellten Knotens enthalten sind.
    - World : World
    // Der Controller, der aus dem Knoten die 3D-Modelle erstellt.
    - KnotRenderer : KnotRenderer
    // Der Undo-Stack.
    + Undo : Stack<Knot>
    // Der Redo-Stack.
    + Redo : Stack<Knot>
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt die 3D-Welt und den Inputhandler in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime time) : void

// Der Spielzustand, der die Auflistung der Mitwirkenden darstellt.
public class CreditsScreen : 
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Mitwirkenden in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Ein Dialog ist ein im Vordergrund erscheinendes Fenster, das auf Nutzerinteraktionen wartet.
public class Dialog : 
  Attributes:
    // Der Fenstertitel.
    + Title : String
    // Der angezeigte Text.
    + Text : String
  Methods:
    // Durch Drücken der Entertaste wird die ausgewählte Aktion ausgeführt. Durch Drücken der Escape-Taste wird der Dialog abgebrochen.
    // Mit Hilfe der Pfeiltasten kann zwischen den Aktionen gewechselt werden.
    + OnKeyEvent () : void
    // Gibt die Ausmaße des Dialogs zurück.
    + Bounds () : Rectangle
    // Bei einem Linksklick geschieht nichts.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Bei einem Rechtsklick geschieht nichts.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void

// Eine Wertesammlung der möglichen Richtungen in einem dreidimensionalen Raum.
// Wird benutzt, damit keine ungültigen Kantenrichtungen angegeben werden können.
public enum Direction
    // 
    Left=1
    // 
    Right=2
    // 
    Up=3
    // 
    Down=4
    // 
    Forward=5
    // 
    Backward=6
    // 
    Zero=0

// Die Zeichenreihenfolge der Elemente der grafischen Benutzeroberfläche.
public enum DisplayLayer
    // 
    None=0
    // 
    Background=1
    // 
    GameWorld=2
    // 
    Dialog=3
    // 
    Menu=4
    // 
    MenuItem=5
    // 
    SubMenu=6
    // 
    SubMenuItem=7
    // 
    Overlay=8
    // 
    Cursor=9

// Diese Klasse repräsentiert eine Option, die eine distinkte Werteliste annehmen kann.
public class DistinctOptionInfo : 
  Attributes:
    // 
    + ValidValues : HashSet<string>
    // Ein Property, das den aktuell abgespeicherten Wert zurück gibt.
    + Value : String
  Methods:
    // Erstellt eine neue Option, die einen der angegebenen gültigen Werte annehmen kann, mit dem angegebenen Namen in dem
    // angegebenen Abschnitt der angegebenen Einstellungsdatei.
    + DistinctOptionInfo (String section, String name, String defaultValue, IEnumerable<string> validValues, ConfigFile configFile) : void

// Eine zeichenbare Spielkomponente, die in einem angegebenen Spielzustand verwendet wird und eine bestimmte Priorität hat.
public class DrawableGameScreenComponent : 
  Attributes:
    // Der zugewiesene Spielzustand.
    + Screen : GameScreen
    // Die Zeichen- und Eingabepriorität.
    + Index : DisplayLayer
  Methods:
    // Gibt Spielkomponenten zurück, die in dieser Spielkomponente enthalten sind.
    + SubComponents (GameTime GameTime) : IEnumerable
    // Erstellt eine neue zeichenbare Spielkomponente in dem angegebenen Spielzustand mit der angegebenen Priorität.
    + DrawableGameStateComponent (GameScreen screen, DisplayLayer index) : void

// Repräsentiert einen Eintrag in einem Dropdown-Menü.
public class DropDownEntry : 
  Attributes:
    // Der Text des Eintrags.
    + Text : String
  Methods:

// Ein Menüeintrag, der den ausgewählten Wert anzeigt und bei einem Linksklick ein Dropdown-Menü zur Auswahl eines neuen Wertes ein- oder ausblendet.
public class DropDownMenuItem : 
  Attributes:
    // Das Dropdown-Menü, das ein- und ausgeblendet werden kann.
    - dropdown : VerticalMenu
  Methods:
    // Fügt Einträge in das Dropdown-Menü ein, die auf Einstellungsoptionen basieren.
    // Fügt Einträge in das Dropdown-Menü ein, die nicht auf Einstellungsoptionen basieren.
    + AddEntries (DistinctOptionInfo option) : void
    // Fügt Einträge in das Dropdown-Menü ein, die auf Einstellungsoptionen basieren.
    // Fügt Einträge in das Dropdown-Menü ein, die nicht auf Einstellungsoptionen basieren.
    + AddEntries (DropDownEntry enties) : void

// Eine Kante eines Knotens, die aus einer Richtung und einer Farbe, sowie optional einer Liste von Flächennummern besteht.
public class Edge : 
  Attributes:
    // Die Farbe der Kante.
    + Color : Color
    // Die Richtung der Kante.
    + Direction : Direction
    // Die Liste der Flächennummern, die an die Kante angrenzen.
    + Rectangles : List<int>
  Methods:
    // Erstellt eine neue Kante mit der angegebenen Richtung.
    + Edge (Direction direction) : void
    // Gibt die Richtung als normalisierten Vektor3 zurück.
    + Get3DDirection () : Vector3

// Ein Postprocessing-Effekt, der eine Überblendung zwischen zwei Spielzuständen darstellt.
public class FadeEffect : 
  Attributes:
    // Gibt an, ob die Überblendung abgeschlossen ist und das RenderTarget nur noch den neuen Spielzustand darstellt.
    - IsFinished : Boolean
    // Der zuletzt gerenderte Frame im bisherigen Spielzustand.
    - PreviousRenderTarget : RenderTarget2D
  Methods:
    // Erstellt einen Überblende-Effekt zwischen den angegebenen Spielzuständen.
    + FadeEffect (GameScreen newScreen, GameScreen oldScreen) : void
    // 
    # DrawRenderTarget (GameTime GameTime) : void

// Eine Hilfsklasse für Dateioperationen.
public class FileUtility : 
  Attributes:
    // Das Einstellungsverzeichnis.
    + SettingsDirectory : String
    // Das Spielstandverzeichnis.
    + SavegameDirectory : String
    // Das Bildschirmfotoverzeichnis.
    + ScreenshotDirectory : String
  Methods:
    // Konvertiert einen Namen eines Knotens oder einer Challenge in einen gültigen Dateinamen durch Weglassen ungüliger Zeichen.
    + ConvertToFileName (String name) : String
    // 
    + GetHash (String filename) : String

// Repräsentiert ein 3D-Modell in einer Spielwelt.
public class GameModel : 
  Attributes:
    // Die Transparenz des Modells.
    + Alpha : float
    // Die Farbe des Modells.
    + BaseColor : Color
    // Die Auswahlfarbe des Modells.
    + HightlightColor : Color
    // Die Intensität der Auswahlfarbe.
    + HighlightIntensity : float
    // Die Modellinformationen wie Position, Skalierung und der Dateiname des 3D-Modells.
    + Info : GameModelInfo
    // Die Klasse des XNA-Frameworks, die ein 3D-Modell repräsentiert.
    + Model : XNA.Model
    // Die Spielwelt, in der sich das 3D-Modell befindet.
    + World : World
    // Die Weltmatrix des 3D-Modells in der angegebenen Spielwelt.
    + WorldMatrix : Matrix
  Methods:
    // Gibt die Mitte des 3D-Modells zurück.
    + Center () : Vector3
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Zeichnet das 3D-Modell in der angegebenen Spielwelt mit dem aktuellen Rendereffekt der Spielwelt.
    + Draw (GameTime GameTime) : void
    // Überprüft, ob der Mausstrahl das 3D-Modell schneidet.
    + Intersects (Ray Ray) : GameObjectDistance
    // Erstellt ein neues 3D-Modell in dem angegebenen Spielzustand mit den angegebenen Modellinformationen.
    + GameModel (GameScreen screen, GameModelInfo info) : void

// Enthält Informationen über ein 3D-Modell wie den Dateinamen, die Rotation und die Skalierung.
public class GameModelInfo : 
  Attributes:
    // Der Dateiname des Modells.
    + Modelname : String
    // Die Rotation des Modells.
    + Rotation : Angles3
    // Die Skalierung des Modells.
    + Scale : Vector3
  Methods:
    // Erstellt ein neues Informations-Objekt eines 3D-Modells mit den angebenenen Informationen zu
    // Dateiname, Rotation und Skalierung.
    + GameModelInfo (String modelname, Angles3 rotation, Vector3 scale) : void

// 
public class GameObjectDistance : 
  Attributes:
    // 
    + Object : IGameObject
    // 
    + Distance : float
  Methods:

// Enthält Informationen über ein 3D-Objekt wie die Position, Sichtbarkeit, Verschiebbarkeit und Auswählbarkeit.
public class GameObjectInfo : 
  Attributes:
    // Die Verschiebbarkeit des Spielobjektes.
    + IsMovable : Boolean
    // Die Auswählbarkeit des Spielobjektes.
    + IsSelectable : Boolean
    // Die Sichtbarkeit des Spielobjektes.
    + IsVisible : Boolean
    // Die Position des Spielobjektes.
    + Position : Vector3
  Methods:
    // Vergleicht zwei Informationsobjekte für Spielobjekte.
    + Equals (C other) : Boolean

// Ein Spielzustand, der zu einem angegebenen Spiel gehört und einen Inputhandler und Rendereffekte enthält.
public class GameScreen : 
  Attributes:
    // Das Spiel, zu dem der Spielzustand gehört.
    + Game : Knot3Game
    // Der Inputhandler des Spielzustands.
    + Input : Input
    // Der aktuelle Postprocessing-Effekt des Spielzustands
    + PostProcessingEffect : RenderEffect
    // Ein Stack, der während dem Aufruf der Draw-Methoden der Spielkomponenten die jeweils aktuellen Rendereffekte enthält.
    + CurrentRenderEffects : RenderEffectStack
  Methods:
    // Beginnt mit dem Füllen der Spielkomponentenliste des XNA-Frameworks und fügt sowohl für Tastatur- als auch für
    // Mauseingaben einen Inputhandler für Widgets hinzu. Wird in Unterklassen von GameScreen reimplementiert und fügt zursätzlich weitere
    // Spielkomponenten hinzu.
    + Entered (GameScreen previousScreen, GameTime time) : void
    // Leert die Spielkomponentenliste des XNA-Frameworks.
    + BeforeExit (GameScreen nextScreen, GameTime time) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // 
    + GameScreen (Knot3Game game) : void
    // Fügt die angegebenen Spielkomponenten und deren über die Methode SubComponents() ermittelten
    // Unterkomponenten der Spielkomponentenliste des XNA-Frameworks hinzu.
    + AddGameComponents (IGameStateComponent[] components) : void
    // Entfernt die angegebenen Spiekomponenten und deren Unterkomponenten von der Spielkomponentenliste des XNA-Frameworks.
    + RemoveGameComponents (IGameStateComponent[] components) : void

// Eine Spielkomponente, die in einem angegebenen Spielzustand verwendet wird und eine bestimmte Priorität hat.
public class GameScreenComponent : 
  Attributes:
    // Die Zeichen- und Eingabepriorität.
    + Index : DisplayLayer
    // Der zugewiesene Spielzustand.
    + Screen : GameScreen
  Methods:
    // Gibt Spielkomponenten zurück, die in dieser Spielkomponente enthalten sind.
    + SubComponents (GameTime GameTime) : IEnumerable
    // Erstellt eine neue Spielkomponente in dem angegebenen Spielzustand mit der angegebenen Priorität.
    + GameStateComponent (GameScreen screen, DisplayLayer index) : void

// Der Spielzustand, der die Grafik-Einstellungen darstellt.
public class GraphicsSettingsScreen : 
  Attributes:
    // Das Menü, das die Einstellungen enthält.
    # settingsMenu : void
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Die horizontale Ausrichtung.
public enum HorizontalAlignment
    // 
    Left=0
    // 
    Center=1
    // 
    Right=2

// Diese Schnittstelle enthält Methoden, die von Speicherformaten für Challenges implementiert werden müssen.
public interface IChallengeIO : 
  Attributes:
  Methods:
    // Speichert eine Challenge.
    + Save (Challenge challenge) : void
    // Lädt eine Challenge.
    + Load (String filename) : Challenge
    // Lädt die Metadaten einer Challenge.
    + LoadMetaData (String filename) : ChallengeMetaData

// Diese Schnittstelle repräsentiert ein Spielobjekt und enthält eine Referenz auf die Spielwelt, in der sich das
// Spielobjekt befindet, sowie Informationen zu dem Spielobjekt.
public interface IGameObject : 
  Attributes:
    // Informationen über das Spielobjekt, wie z.B. die Position.
    + Info : GameObjectInfo
    // Eine Referenz auf die Spielwelt, in der sich das Spielobjekt befindet.
    + World : World
  Methods:
    // Die Mitte des Spielobjektes im 3D-Raum.
    + Center () : Vector3
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Zeichnet das Spielobjekt.
    + Draw (GameTime time) : void
    // Überprüft, ob der Mausstrahl das Spielobjekt schneidet.
    + Intersects (Ray ray) : GameObjectDistance

// Eine Schnittstelle für eine Spielkomponente, die in einem angegebenen Spielzustand verwendet wird und eine bestimmte Priorität hat.
public interface IGameScreenComponent : 
  Attributes:
    // Die Zeichen- und Eingabepriorität.
    + Index : DisplayLayer
    // Der zugewiesene Spielzustand.
    + Screen : GameScreen
  Methods:
    // Gibt Spielkomponenten zurück, die in dieser Spielkomponente enthalten sind.
    + SubComponents (GameTime time) : IEnumerable

// Repräsentiert einen Übergang zwischen zwei Kanten.
public interface IJunction : 
  Attributes:
    // Die Kante vor dem Übergang.
    + EdgeFrom : Edge
    // Die Kante nach dem Übergang.
    + EdgeTo : Edge
  Methods:

// Eine Schnittstelle, die von Klassen inmplementiert wird, welche auf Tastatureingaben reagieren.
public interface IKeyEventListener : 
  Attributes:
    // Die Eingabepriorität.
    + Index : DisplayLayer
    // Zeigt an, ob die Klasse zur Zeit auf Tastatureingaben reagiert.
    + IsKeyEventEnabled : Boolean
    // Die Tasten, auf die die Klasse reagiert.
    + ValidKeys : List<Keys>
  Methods:
    // Die Reaktion auf eine Tasteneingabe.
    + OnKeyEvent () : void

// Diese Schnittstelle enthält Methoden, die von Speicherformaten für Knoten implementiert werden müssen.
public interface IKnotIO : 
  Attributes:
    // 
    + FileExtensions : IEnumerable<string>
  Methods:
    // Speichert einen Knoten.
    + Save (Knot knot) : void
    // Lädt einen Knoten.
    + Load (String filename) : Knot
    // Lädt die Metadaten eines Knotens.
    + LoadMetaData (String filename) : KnotMetaData

// Eine Schnittstelle, die von Klassen implementiert wird, die auf Maus-Klicks reagieren.
public interface IMouseEventListener : 
  Attributes:
    // Die Eingabepriorität.
    + Index : DisplayLayer
    // Ob die Klasse zur Zeit auf Mausklicks reagiert.
    + IsMouseEventEnabled : Boolean
  Methods:
    // Die Ausmaße des von der Klasse repräsentierten Objektes.
    + Bounds () : Rectangle
    // Die Reaktion auf einen Linksklick.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Die Reaktion auf einen Rechtsklick.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void

// Stellt für jeden Frame die Maus- und Tastatureingaben bereit. Daraus werden die nicht von XNA bereitgestellten Mauseingaben berechnet.
public class Input : 
  Attributes:
    // Enthält den Klickzustand der rechten Maustaste.
    + RightMouseButton : ClickState
    // Enthält den Klickzustand der linken Maustaste.
    + LeftMouseButton : ClickState
    // Enthält den Mauszustand von XNA des aktuellen Frames.
    + CurrentMouseState : MouseState
    // Enthält den Tastaturzustand von XNA des aktuellen Frames.
    + CurrentKeyboardState : KeyboardState
    // Enthält den Mauszustand von XNA des vorherigen Frames.
    + PreviousMouseState : MouseState
    // Enthält den Tastaturzustand von XNA des vorherigen Frames.
    + PreviousKeyboardState : KeyboardState
    // Gibt an, ob die Mausbewegung für Kameradrehungen verwendet werden soll.
    + GrabMouseMovement : Boolean
  Methods:
    // Erstellt ein neues Input-Objekt, das an den übergebenen Spielzustand gebunden ist.
    + Input (GameScreen screen) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void

// Ein Menüeintrag, der Texteingaben vom Spieler annimmt.
public class InputItem : 
  Attributes:
    // Beinhaltet den vom Spieler eingegebenen Text.
    + InputText : String
  Methods:

// Stellt eine Schnittstelle für Klassen bereit, die Rendereffekte ermöglichen.
public interface IRenderEffect : 
  Attributes:
    // Das Rendertarget, in das zwischen dem Aufruf der Begin()- und der End()-Methode gezeichnet wird,
    // weil es in Begin() als primäres Rendertarget des XNA-Frameworks gesetzt wird.
    + RenderTarget : RenderTarget2D
  Methods:
    // In der Methode Begin() wird das aktuell von XNA genutzte Rendertarget auf einem Stack gesichert
    // und das Rendertarget des Effekts wird als aktuelles Rendertarget gesetzt.
    + Begin (GameTime) : void
    // Das auf dem Stack gesicherte, vorher genutzte Rendertarget wird wiederhergestellt und
    // das Rendertarget dieses Rendereffekts wird, unter Umständen in Unterklassen verändert,
    // auf dieses ubergeordnete Rendertarget gezeichnet.
    + End (GameTime) : void
    // Zeichnet das übergebene 3D-Modell auf das Rendertarget.
    + DrawModel (GameTime, GameModel model) : void
    // Beim Laden des Modells wird von der XNA-Content-Pipeline jedem ModelMeshPart ein Shader der Klasse
    // BasicEffect zugewiesen. Für die Nutzung des Modells in diesem Rendereffekt kann jedem ModelMeshPart
    // ein anderer Shader zugewiesen werden.
    + RemapModel (GameModel model) : void

// Der Zustand eines Menüeintrags.
public enum ItemState
    // 
    Selected=1
    // 
    Hovered=2
    // 
    None=0

// Ein Menüeintrag, der einen Tastendruck entgegennimmt und in der enthaltenen Option als Zeichenkette speichert.
public class KeyInputItem : 
  Attributes:
    // Die Option in einer Einstellungsdatei.
    - option : OptionInfo
  Methods:
    // Speichert die aktuell gedrückte Taste in der Option.
    + OnKeyEvent () : void

// Diese Klasse repräsentiert einen gültigen Knoten, bestehend aus einem Knoten-Metadaten-Objekt und einer doppelt-verketteten Liste von Kanten.
public class Knot : 
  Attributes:
    // Der Name des Knotens, welcher auch leer sein kann.
    // Beim Speichern muss der User in diesem Fall zwingend einen nichtleeren Namen wählen.
    // Der Wert dieser Eigenschaft wird aus der \glqq Name \grqq -Eigenschaft des Metadaten-Objektes geladen
    // und bei Änderungen wieder in diesem gespeichert.
    // Beim Ändern dieser Eigenschaft wird automatisch auch der im Metadaten-Objekt enthaltene Dateiname verändert.
    + Name : String
    // Das Startelement der doppelt-verketteten Liste, in der die Kanten gespeichert werden.
    - edges : Circle
    // Die Metadaten des Knotens.
    + MetaData : KnotMetaData
    // Ein Ereignis, das in der Move-Methode ausgelöst wird, wenn sich die Struktur der Kanten geändert hat.
    + EdgesChanged : Action
    // Enthält die aktuell vom Spieler selektierten Kanten in der Reihenfolge, in der sie selektiert wurden.
    + SelectedEdges : IEnumerable<Edge>
  Methods:
    // Erstellt einen minimalen Standardknoten. Das Metadaten-Objekt enthält in den Eigenschaften,
    // die das Speicherformat und den Dateinamen beinhalten, den Wert \glqq null \grqq.
    + Knot () : void
    // Speichert den Knoten unter dem Dateinamen in dem Dateiformat, das in dem Metadaten-Objekt angegeben ist.
    // Enthalten entweder die Dateiname-Eigenschaft, die Dateiformat-Eigenschaft
    // oder beide den Wert \glqq null \grqq , dann wird eine IOException geworfen.
    + Save () : void
    // Hebt die aktuelle Kantenauswahl auf.
    + ClearSelection () : void
    // Erstellt einen neuen Knoten mit dem angegebenen Metadaten-Objekt und den angegebenen Kanten,
    // die in der doppelt verketteten Liste gespeichert werden.
    // Die Eigenschaft des Metadaten-Objektes, die die Anzahl der Kanten enthält,
    // wird auf ein Delegate gesetzt, welches jeweils die aktuelle Anzahl der Kanten dieses Knotens zurückgibt.
    + Knot (KnotMetaData meta, IEnumerable<Edge> edges) : void
    // Prüft, ob eine Verschiebung der aktuellen Kantenauswahl in die angegebene Richtung um die angegebene Distanz gültig ist.
    + IsValidMove (Direction dir, Integer distance) : Boolean
    // Verschiebt die aktuelle Kantenauswahl in die angegebene Richtung um die angegebene Distanz.
    + Move (Direction dir, Integer distance) : Boolean
    // Gibt die doppelt-verkettete Kantenliste als Enumerator zurück.
    + GetEnumerator () : IEnumerator<Edge>
    // Erstellt eine vollständige Kopie des Knotens, inklusive der Kanten-Datentuktur und des Metadaten-Objekts.
    + Clone () : Object
    // Fügt die angegebene Kante zur aktuellen Kantenauswahl hinzu.
    + AddToSelection (Edge edge) : void
    // Entfernt die angegebene Kante von der aktuellen Kantenauswahl.
    + RemoveFromSelection (Edge edge) : void
    // Fügt alle Kanten auf dem kürzesten Weg zwischen der zuletzt ausgewählten Kante und der angegebenen Kante
    // zur aktuellen Kantenauswahl hinzu. Sind beide Wege gleich lang,
    // wird der Weg in Richtung der ersten Kante ausgewählt.
    + AddRangeToSelection (Edge edge) : void
    // Prüft, ob die angegebene Kante in der aktuellen Kantenauswahl enthalten ist.
    + IsSelected (Edge edge) : Boolean
    // Gibt die doppelt-verkettete Kantenliste als Enumerator zurück.
    + GetEnumerator () : IEnumerator
    // Speichert den Knoten unter dem angegebenen Dateinamen in dem angebenenen Dateiformat.
    + Save (IKnotIO format, String filename) : void
    // Prüft, ob die räumliche Struktur identisch ist, unabhängig von dem Startpunkt und der Richtung der Datenstruktur.
    + Equals (T other) : Boolean

// Die zentrale Spielklasse, die von der \glqq Game \grqq -Klasse des XNA-Frameworks erbt.
public class Knot3Game : 
  Attributes:
    // Wird dieses Attribut ausgelesen, dann gibt es einen Wahrheitswert zurück, der angibt,
    // ob sich das Spiel im Vollbildmodus befindet. Wird dieses Attribut auf einen Wert gesetzt,
    // dann wird der Modus entweder gewechselt oder beibehalten, falls es auf den selben Wert gesetzt wird.
    + IsFullScreen : Boolean
    // Enthält als oberste Element den aktuellen Spielzustand und darunter die zuvor aktiven Spielzustände.
    + Screens : Stack<GameScreen>
    // Dieses Attribut dient sowohl zum Setzen des Aktivierungszustandes der vertikalen Synchronisation,
    // als auch zum Auslesen dieses Zustandes.
    + VSync : Boolean
    // Der aktuelle Grafikgeräteverwalter des XNA-Frameworks.
    + Graphics : GraphicsDeviceManager
  Methods:
    // Erstellt ein neues zentrales Spielobjekt und setzt die Auflösung des BackBuffers auf
    // die in der Einstelungsdatei gespeicherte Auflösung oder falls nicht vorhanden auf die aktuelle
    // Bildschirmauflösung und wechselt in den Vollbildmodus.
    + Knot3Game () : void
    // Wird einmal beim Spielstart aufgerufen und lädt die Spielzustände.
    + LoadContent () : void
    // Macht nichts. Das Freigeben aller Objekte wird von der automatischen Speicherbereinigung übernommen.
    + UnloadContent () : void
    // Ruft die Draw()-Methode des aktuellen Spielzustands auf.
    + Draw (GameTime time) : void
    // Ruft die Update()-Methode des aktuellen Spielzustands auf und wechselt den Spielzustand bei Bedarf.
    + Update (GameTime GameTime) : void

// Implementiert das Speicherformat für Knoten.
public class KnotFileIO : 
  Attributes:
    // Die für eine Knoten-Datei gültigen Dateiendungen.
    + FileExtensions : IEnumerable<string>
  Methods:
    // Erstellt ein KnotFileIO-Objekt.
    + KnotFileIO () : void
    // Speichert einen Knoten in dem Dateinamen, der in dem Knot-Objekt enthalten ist.
    + Save (Knot knot) : void
    // Lädt eines Knotens aus einer angebenenen Datei.
    + Load (String filename) : Knot
    // Lädt die Metadaten eines Knotens aus einer angegebenen Datei.
    + LoadMetaData (String filename) : KnotMetaData

// Verarbeitet die Maus- und Tastatureingaben des Spielers und modifiziert die Kamera-Position
// und das Kamera-Ziel.
public class KnotInputHandler : 
  Attributes:
    // Die Spielwelt.
    - world : World
    // Der Spielzustand.
    - screen : GameScreen
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Erstellt einen neuen KnotInputHandler für den angegebenen Spielzustand und die angegebene Spielwelt.
    + KnotInputHandler (GameScreen screen, World world) : void

// Enthält Metadaten eines Knotens, die aus einer Spielstand-Datei schneller eingelesen werden können,
// als der vollständige Knoten. Dieses Objekt enthält keine Datenstruktur zur Repräsentation der Kanten,
// sondern nur Informationen über den Namen des Knoten und die Anzahl seiner Kanten. Es kann ohne ein
// dazugehöriges Knoten-Objekt existieren, aber jedes Knoten-Objekt enthält genau ein Knoten-Metadaten-Objekt.
public class KnotMetaData : 
  Attributes:
    // Der Anzeigename des Knotens, welcher auch leer sein kann.
    // Beim Speichern muss der Spieler in diesem Fall zwingend
    // einen nichtleeren Namen wählen. Wird ein neuer Anzeigename festgelegt,
    // dann wird der Dateiname ebenfalls auf einen neuen Wert gesetzt, unabhängig davon
    // ob er bereits einen Wert enthält oder \glqq null \grqq ist.
    // Diese Eigenschaft kann öffentlich gelesen und gesetzt werden.
    + Name : String
    // Das Format, aus dem die Metadaten geladen wurden.
    // Es ist genau dann \glqq null \grqq , wenn die Metadaten nicht aus einer Datei gelesen wurden. Nur lesbar.
    + Format : IKnotIO
    // Ein Delegate, das die Anzahl der Kanten zurückliefert.
    // Falls dieses Metadaten-Objekt Teil eines Knotens ist, gibt es dynamisch die Anzahl der
    // Kanten des Knoten-Objektes zurück. Anderenfalls gibt es eine statische Zahl zurück,
    // die beim Einlesen der Metadaten vor dem Erstellen dieses Objektes gelesen wurde. Nur lesbar.
    + CountEdges : Func<Integer>
    // Falls die Metadaten aus einer Datei eingelesen wurden, enthält dieses Attribut den Dateinamen,
    // sonst \glqq null \grqq.
    + Filename : String
  Methods:
    // Erstellt ein neues Knoten-Metadaten-Objekt mit einem angegebenen Knotennamen
    // und einer angebenen Funktion, welche eine Kantenanzahl zurück gibt.
    // Zusätzlich wird der Dateiname oder das Speicherformat angegeben, aus dem die Metadaten gelesen wurden.
    + KnotMetaData (String name, Func<Integer> countEdges, IKnotIO format, String filename) : KnotMetaData
    // Erstellt ein neues Knoten-Metadaten-Objekt mit einem angegebenen Knotennamen
    // und einer angebenen Funktion, welche eine Kantenanzahl zurück gibt.
    + KnotMetaData (String name, Func<Integer> countEdges) : KnotMetaData

// Erstellt aus einem Knoten-Objekt die zu dem Knoten gehörenden 3D-Modelle sowie die 3D-Modelle der Pfeile,
// die nach einer Auswahl von Kanten durch den Spieler angezeigt werden.
public class KnotRenderer : 
  Attributes:
    // Enthält Informationen über die Position des Knotens.
    + Info : GameObjectInfo
    // Die Spielwelt, in der die 3D-Modelle erstellt werden sollen.
    + World : World
    // Die Liste der 3D-Modelle der Pfeile,
    // die nach einer Auswahl von Kanten durch den Spieler angezeigt werden.
    - arrows : List<ArrowModel>
    // Die Liste der 3D-Modelle der Kantenübergänge.
    - nodes : List<NodeModel>
    // Die Liste der 3D-Modelle der Kanten.
    - pipes : List<PipeModel>
    // Der Knoten, für den 3D-Modelle erstellt werden sollen.
    + Knot : Knot
    // Der Zwischenspeicher für die 3D-Modelle der Kanten. Hier wird das Fabrik-Entwurfsmuster verwendet.
    - pipeFactory : ModelFactory
    // Der Zwischenspeicher für die 3D-Modelle der Kantenübergänge. Hier wird das Fabrik-Entwurfsmuster verwendet.
    - nodeFactory : ModelFactory
    // Der Zwischenspeicher für die 3D-Modelle der Pfeile. Hier wird das Fabrik-Entwurfsmuster verwendet.
    - arrowFactory : ModelFactory
  Methods:
    // Gibt den Ursprung des Knotens zurück.
    + Center () : Vector3
    // Gibt immer \glqq null \grqq zurück.
    + Intersects (Ray Ray) : GameObjectDistance
    // Wird mit dem EdgesChanged-Event des Knotens verknüft.
    + OnEdgesChanged () : void
    // Erstellt ein neues KnotRenderer-Objekt für den angegebenen Spielzustand mit den angegebenen
    // Spielobjekt-Informationen, die unter Anderem die Position des Knotenursprungs enthalten.
    + KnotRenderer (GameScreen screen, GameObjectInfo info) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Zeichnet nichts.
    + Draw (GameTime GameTime) : void
    // Gibt einen Enumerator der aktuell vorhandenen 3D-Modelle zurück.
    + GetEnumerator () : IEnumerator

// Diese Klasse repräsentiert einen Parser für das Knoten-Austauschformat und enthält die
// eingelesenen Informationen wie den Namen des Knotens und die Kantenliste als Eigenschaften.
public class KnotStringIO : 
  Attributes:
    // Der Name der eingelesenen Knotendatei oder des zugewiesenen Knotenobjektes.
    + Name : String
    // Die Kanten der eingelesenen Knotendatei oder des zugewiesenen Knotenobjektes.
    + Edges : IEnumerable<Edge>
    // Die Anzahl der Kanten der eingelesenen Knotendatei oder des zugewiesenen Knotenobjektes.
    + CountEdges : Integer
    // Erstellt aus den \glqq Name\grqq~- und \glqq Edges\grqq~-Eigenschaften einen neue Zeichenkette,
    // die als Dateiinhalt in einer Datei eines Spielstandes einen gültigen Knoten repräsentiert.
    + Content : String
  Methods:
    // Liest das in der angegebenen Zeichenkette enthaltene Dateiformat ein. Enthält es einen gültigen Knoten,
    // so werden die \glqq Name\grqq~- und \glqq Edges\grqq~-Eigenschaften auf die eingelesenen Werte gesetzt.
    // Enthält es einen ungültigen Knoten, so wird eine IOException geworfen und das Objekt wird nicht erstellt.
    + KnotStringIO (String content) : void
    // Erstellt ein neues Objekt und setzt die \glqq Name\grqq~- und \glqq Edge\grqq~-Eigenschaften auf die
    // im angegebenen Knoten enthaltenen Werte.
    + KnotStringIO (Knot knot) : void

// Eine statische Klasse, die Bezeichner in lokalisierten Text umsetzen kann.
public class Localizer : 
  Attributes:
    // 
    - localization : ConfigFile
  Methods:
    // Liefert zu dem übergebenen Bezeichner den zugehörigen Text aus der Lokalisierungsdatei der
    // aktuellen Sprache zurück, die dabei aus der Einstellungsdatei des Spiels gelesen wird.
    + Localize (String text) : String

// Ein Menü enthält Bedienelemente zur Benutzerinteraktion. Diese Klasse bietet Standardwerte für
// Positionen, Größen, Farben und Ausrichtungen der Menueinträge. Sie werden gesetzt, wenn die Werte
// der Menüeinträge \glqq null\grqq~sind.
public class Menu : 
  Attributes:
    // Die von der Auflösung unabhängige Größe in Prozent.
    + RelativeItemSize : Func<int, Vector2>
    // Die von der Auflösung unabhängige Position in Prozent.
    + RelativeItemPosition : Func<int, Vector2>
    // Die vom Zustand des Menüeintrags abhängige Vordergrundfarbe des Menüeintrags.
    + ItemForegroundColor : Func<ItemState, Color>
    // Die vom Zustand des Menüeintrags abhängige Hintergrundfarbe des Menüeintrags.
    + ItemBackgroundColor : Func<ItemState, Color>
    // Die horizontale Ausrichtung der Menüeinträge.
    + ItemAlignX : HorizontalAlignment
    // Die vertikale Ausrichtung der Menüeinträge.
    + ItemAlignY : VerticalAlignment
  Methods:
    // Fügt einen Eintrag in das Menü ein. Falls der Menüeintrag \glqq null\grqq~ oder leere Werte für
    // Position, Größe, Farbe oder Ausrichtung hat, werden die Werte mit denen des Menüs überschrieben.
    + Add (MenuItem item) : void
    // Entfernt einen Eintrag aus dem Menü.
    + Delete (MenuItem item) : void
    // Gibt einen Eintrag des Menüs zurück.
    + GetItem (Integer i) : MenuItem
    // Gibt die Anzahl der Einträge des Menüs zurück.
    + Size () : Integer
    // Gibt einen Enumerator über die Einträge des Menüs zurück.
    + GetEnumerator () : IEnumerator

// Eine Schaltfläche, der eine Zeichenkette anzeigt und auf einen Linksklick reagiert.
public class MenuButton : 
  Attributes:
    // Die Aktion, die ausgeführt wird, wenn der Spieler auf die Schaltfläche klickt.
    + OnClick : Action
  Methods:
    // Erstellt eine neue Schaltfläche mit dem angegebenen Namen und der angegebenen Aktion.
    + MenuButton (String name, Action onClick) : void

// Ein abstrakte Klasse für Menüeinträge, die
public class MenuItem : 
  Attributes:
    // Gibt an, ob die Maus sich über dem Eintrag befindet, ohne ihn anzuklicken, ob er ausgewählt ist
    // oder nichts von beidem.
    + ItemState : ItemState
    // Die Zeichenreihenfolge.
    + ItemOrder : Integer
    // Der Anzeigetext der Schaltfläche.
    + Text : String
  Methods:
    // Reaktionen auf Tasteneíngaben.
    + OnKeyEvent () : void
    // Reaktionen auf einen Linksklick.
    + OnLeftClick (Vector2 position, ClickState state, GameTime time) : void
    // Reaktionen auf einen Rechtsklick.
    + OnRightClick (Vector2 position, ClickState state, GameTime time) : void
    // Gibt die Ausmaße des Eintrags zurück.
    + Bounds () : Rectangle

// Eine abstrakte Klasse, von der alle Spielzutsände erben, die Menüs darstellen.
public class MenuScreen : 
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Wird aufgerufen, wenn in diesen Spielzustand gewechselt wird.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Ein Zwischenspeicher für 3D-Modelle.
public class ModelFactory : 
  Attributes:
    // Die Zuordnung zwischen den Modellinformationen zu den 3D-Modellen.
    - cache : Dictionary<GameModelInfo, GameModel>
    // Ein Delegate, das beim Erstellen eines Zwischenspeichers zugewiesen wird und aus den
    // angegebenen Modellinformationen und dem angegebenen Spielzustand ein 3D-Modell erstellt.
    - createModel : Func<GameScreen, GameModelInfo, GameModel>
  Methods:
    // Falls das 3D-Modell zwischengespeichert ist, wird es zurückgegeben, sonst mit createModel() erstellt.
    + this (GameScreen state, GameModelInfo info) : GameModel
    // Erstellt einen neuen Zwischenspeicher.
    + ModelFactory (GameModelInfo, GameModel>, Func<GameScreen createModel) : void

// Ein Inputhandler, der Mauseingaben auf 3D-Modellen verarbeitet.
public class ModelMouseHandler : 
  Attributes:
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void

// Repräsentiert einen Mauszeiger.
public class MousePointer : 
  Attributes:
  Methods:
    // Erstellt einen neuen Mauszeiger für den angegebenen Spielzustand.
    + MousePointer (GameScreen screen) : void
    // Zeichnet den Mauszeiger.
    + Draw (GameTime time) : void

// Eine Zuordnung zwischen Kanten und Kantenübergänge.
public class NodeMap : 
  Attributes:
  Methods:
    // Gibt den Übergang am Anfang der Kante zurück.
    + From (Edge edge) : Node
    // Gibt den Übergang am Ende der Kante zurück.
    + To (Edge edge) : Node
    // Aktualisiert die Zuordnung, wenn sich die Kanten geändert haben.
    + OnEdgesChanged () : void

// Ein 3D-Modell, das einen Kantenübergang darstellt.
public class NodeModel : 
  Attributes:
    // Enthält Informationen über den darzustellende 3D-Modell des Kantenübergangs.
    + Info : NodeModelInfo
  Methods:
    // Erstellt ein neues 3D-Modell mit dem angegebenen Spielzustand und dem angegebenen Informationsobjekt.
    + NodeModel (GameScreen screen, NodeModelInfo info) : void
    // Zeichnet das 3D-Modell mit dem aktuellen Rendereffekt.
    + Draw (GameTime GameTime) : void
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void

// Enthält Informationen über ein 3D-Modell, das einen Kantenübergang darstellt.
public class NodeModelInfo : 
  Attributes:
    // Die Kante vor dem Übergang.
    + EdgeFrom : Edge
    // Die Kante nach dem Übergang.
    + EdgeTo : Edge
    // Der Knoten, der die Kanten enthält.
    + Knot : Knot
    // Die Position des Übergangs.
    + Position : Vector3
  Methods:
    // Erstellt ein neues Informationsobjekt für ein 3D-Modell, das einen Kantenübergang darstellt.
    + NodeModelInfo (Knot knot, Edge from, Edge to) : void

// Enthält Informationen über einen Eintrag in einer Einstellungsdatei.
public class OptionInfo : 
  Attributes:
    // Die Einstellungsdatei.
    - configFile : ConfigFile
    // Der Abschnitt der Einstellungsdatei.
    + Section : String
    // Der Name der Option.
    + Name : String
    // Der Standardwert der Option.
    + DefaultValue : String
    // Der Wert der Option.
    + Value : String
  Methods:
    // Erstellt ein neues OptionsInfo-Objekt aus den übergegebenen Werten.
    + OptionInfo (String section, String name, String defaultValue, ConfigFile configFile) : void

// Eine statische Klasse, die eine Referenz auf die zentrale Einstellungsdatei des Spiels enthält.
public class Options : 
  Attributes:
    // Die zentrale Einstellungsdatei des Spiels.
    + Default : ConfigFile
  Methods:

// Pausiert ein Spieler im Creative- oder Challenge-Modus das Spiel,
// wird dieser Dialog über anderen Spielkonmponenten angezeigt.
public class PauseDialog : 
  Attributes:
    // Das Menü, das verschiedene Schaltflächen enthält.
    - pauseMenu : VerticalMenu
  Methods:

// Ein 3D-Modell, das eine Kante darstellt.
public class PipeModel : 
  Attributes:
    // Enthält Informationen über die darzustellende Kante.
    + Info : PipeModelInfo
  Methods:
    // Prüft, ob der angegebene Mausstrahl das 3D-Modell schneidet.
    + Intersects (Ray ray) : GameObjectDistance
    // Erstellt ein neues 3D-Modell mit dem angegebenen Spielzustand und den angegebenen Spielinformationen.
    + PipeModel (GameScreen screen, PipeModelInfo info) : void

// Enthält Informationen über ein 3D-Modell, das eine Kante darstellt.
public class PipeModelInfo : 
  Attributes:
    // Die Kante, die durch das 3D-Modell dargestellt wird.
    + Edge : Edge
    // Der Knoten, der die Kante enthält.
    + Knot : Knot
    // Die Position, an der die Kante beginnt.
    + PositionFrom : Vector3
    // Die Position, an der die Kante endet.
    + PositionTo : Vector3
  Methods:
    // Erstellt ein neues Informationsobjekt für ein 3D-Modell, das eine Kante darstellt.
    + PipeModelInfo (Knot knot, Edge edge) : void

// Ein Inputhandler, der für das Verschieben der Kanten zuständig ist.
public class PipeMovement : 
  Attributes:
    // Enthält Informationen über die Position des Knotens.
    + Info : GameObjectInfo
    // Der Knoten, dessen Kanten verschoben werden können.
    + Knot : Knot
    // Die Spielwelt, in der sich die 3D-Modelle der Kanten befinden.
    + World : World
  Methods:
    // Gibt den Ursprung des Knotens zurück.
    + Center () : Vector3
    // Gibt immer \glqq null \grqq zurück.
    + Intersects (Ray Ray) : GameObjectDistance
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // 
    + PipeMovement (GameScreen screen, World world, GameObjectInfo info) : void
    // Gibt einen Enumerator über die während einer Verschiebeaktion dynamisch erstellten 3D-Modelle zurück.
    + GetEnumerator () : IEnumerator
    // Zeichnet die während einer Verschiebeaktion dynamisch erstellten 3D-Modelle.
    + Draw (GameTime GameTime) : void

// Ein Exportformat für 3D-Drucker.
public class PrinterIO : 
  Attributes:
    // Die gültigen Dateiendungen für das 3D-Drucker-Format.
    + FileExtensions : IEnumerable<string>
  Methods:
    // Erstellt ein neues PrinterIO-Objekt.
    + PrinterIO () : void
    // Exportiert den Knoten in einem gültigen 3D-Drucker-Format.
    + Save (Knot knot) : void
    // Gibt eine IOException zurück.
    + Load (String filename) : Knot
    // Gibt eine IOException zurück.
    + LoadMetaData (String filename) : KnotMetaData

// Der Spielzustand, der die Profil-Einstellungen darstellt.
public class ProfileSettingsScreen : 
  Attributes:
    // 
    # settingsMenu : void
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Menü mit den Einstellungen in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Eine abstrakte Klasse, die eine Implementierung von IRenderEffect darstellt.
public class RenderEffect : 
  Attributes:
    // Das Rendertarget, in das zwischen dem Aufruf der Begin()- und der End()-Methode gezeichnet wird,
    // weil es in Begin() als primäres Rendertarget des XNA-Frameworks gesetzt wird.
    + RenderTarget : RenderTarget2D
    // Der Spielzustand, in dem der Effekt verwendet wird.
    # screen : GameScreen
    // Ein Spritestapel, der verwendet wird, um das Rendertarget dieses Rendereffekts auf das übergeordnete Rendertarget zu zeichnen.
    # spriteBatch : SpriteBatch
  Methods:
    // In der Methode Begin() wird das aktuell von XNA genutzte Rendertarget auf einem Stack gesichert
    // und das Rendertarget des Effekts wird als aktuelles Rendertarget gesetzt.
    + Begin (GameTime) : void
    // Das auf dem Stack gesicherte, vorher genutzte Rendertarget wird wiederhergestellt und
    // das Rendertarget dieses Rendereffekts wird, unter Umständen in Unterklassen verändert,
    // auf dieses ubergeordnete Rendertarget gezeichnet.
    + End (GameTime) : void
    // Zeichnet das übergebene 3D-Modell auf das Rendertarget.
    + DrawModel (GameTime, GameModel GameModel) : void
    // Beim Laden des Modells wird von der XNA-Content-Pipeline jedem ModelMeshPart ein Shader der Klasse
    // BasicEffect zugewiesen. Für die Nutzung des Modells in diesem Rendereffekt kann jedem ModelMeshPart
    // ein anderer Shader zugewiesen werden.
    + RemapModel (GameModel GameModel) : void
    // 
    # DrawRenderTarget (GameTime time) : void

// Ein Stapel, der während der Draw-Aufrufe die Hierarchie der aktuell verwendeten Rendereffekte verwaltet
// und automatisch das aktuell von XNA verwendete Rendertarget auf das Rendertarget des obersten Rendereffekts
// setzt.
public class RenderEffectStack : 
  Attributes:
    // Der oberste Rendereffekt.
    + CurrentEffect : IRenderEffect
    // Der Standard-Rendereffekt, der verwendet wird, wenn der Stapel leer ist.
    - DefaultEffect : IRenderEffect
  Methods:
    // Entfernt den obersten Rendereffekt vom Stapel.
    + Pop () : IRenderEffect
    // Legt einen Rendereffekt auf den Stapel.
    + Push (IRenderEffect effect) : void
    // Erstellt einen neuen Rendereffekt-Stapel.
    + RenderEffectStack (IRenderEffect defaultEffect) : void

// Ein Dialog, der angezeigt wird, wenn der Spieler einen Knoten speichern will.
public class SaveDialog : 
  Attributes:
  Methods:

// Ein Spielzustand, der das Haupt-Einstellungsmenü zeichnet.
public class SettingsScreen : 
  Attributes:
    // Das Haupt-Einstellungsmenü.
    # navigation : void
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt das Haupt-Einstellungsmenü in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime time) : void

// Die 3D-Modelle, die während einer Verschiebung von Kanten die Vorschaumodelle repräsentieren.
public class ShadowGameModel : 
  Attributes:
    // Die Farbe der Vorschaumodelle.
    + ShadowColor : Color
    // Die Transparenz der Vorschaumodelle.
    + ShadowAlpha : float
  Methods:
    // Erstellt ein neues Vorschaumodell in dem angegebenen Spielzustand für das angegebene zu dekorierende Modell.
    + ShadowGameModel (GameScreen sreen, GameModel decoratedModel) : void
    // Zeichnet das Vorschaumodell.
    + Draw (GameTime GameTime) : void

// Eine abstrakte Klasse, die ein Vorschau-Spielobjekt darstellt.
public class ShadowGameObject : 
  Attributes:
    // Enthält Informationen über das Vorschau-Spielobjekt.
    + Info : GameObjectInfo
    // Eine Referenz auf die Spielwelt, in der sich das Spielobjekt befindet.
    + World : World
    // Die Position, an der das Vorschau-Spielobjekt gezeichnet werden soll.
    + ShadowPosition : Vector3
    // Die Position, an der sich das zu dekorierende Objekt befindet.
    + OriginalPosition : Vector3
  Methods:
    // Die Position, an der das Vorschau-Spielobjekt gezeichnet werden soll.
    + Center () : Vector3
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime GameTime) : void
    // Zeichnet das Vorschau-Spielobjekt.
    + Draw (GameTime GameTime) : void
    // Prüft, ob der angegebene Mausstrahl das Vorschau-Spielobjekt schneidet.
    + Intersects (Ray Ray) : GameObjectDistance
    // Erstellt ein neues Vorschauobjekt in dem angegebenen Spielzustand für das angegebene zu dekorierende Objekt.
    + ShadowGameObject (GameScreen screen, IGameObject decoratedObj) : void

// Ein Menüeintrag, der einen Schieberegler bereitstellt, mit dem man einen Wert zwischen einem minimalen
// und einem maximalen Wert über Verschiebung einstellen kann.
public class SliderItem : 
  Attributes:
    // Der aktuelle Wert.
    + Value : Integer
    // Der minimale Wert.
    + MinValue : Integer
    // Der maximale Wert.
    + MaxValue : Integer
    // 
    + Step : Integer
  Methods:

// Ein Rendereffekt, der 3D-Modelle mit dem von der XNA-Content-Pipeline standardmäßig zugewiesenen
// BasicEffect-Shader zeichnet und keinen Post-Processing-Effekt anwendet.
public class StandardEffect : 
  Attributes:
  Methods:
    // 
    # DrawRenderTarget (GameTime GameTime) : void
    // Erstellt einen neuen Standardeffekt.
    + StandardEffect (GameScreen screen) : void

// Der Startbildschirm.
public class StartScreen : 
  Attributes:
    // Die Schaltflächen des Startbildschirms.
    - buttons : Menu
  Methods:
    // Wird für jeden Frame aufgerufen.
    + Update (GameTime time) : void
    // Fügt die das Menü in die Spielkomponentenliste ein.
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Ein Dialog, der eine Texteingabe des Spielers entgegennimmt.
public class TextInputDialog : 
  Attributes:
    // Der Text, der durch den Spieler eingegeben wurde.
    + InputText : String
  Methods:

// Eine Einführung in das Spielen von Challenges.
// Der Spieler wird dabei durch Anweisungen an das Lösen von Challenges herangeführt.
public class TutorialChallengeModeScreen : 
  Attributes:
  Methods:
    // 
    + Entered (GameScreen previousScreen, GameTime GameTime) : void

// Die vertikale Ausrichtung.
public enum VerticalAlignment
    // 
    Top=1
    // 
    Center=0
    // 
    Bottom=2

// Ein Menü, das alle Einträge vertikal anordnet.
public class VerticalMenu : 
  Attributes:
  Methods:
    // Ordnet die Einträge vertikal an.
    + AlignItems () : void

// Eine abstrakte Klasse, von der alle Element der grafischen Benutzeroberfläche erben.
public class Widget : 
  Attributes:
    // Die von der Auflösung unabhängige Größe in Prozent.
    + RelativeSize : Vector2
    // Die von der Auflösung unabhängige Position in Prozent.
    + RelativePosition : Vector2
    // Gibt an, ob das grafische Element sichtbar ist.
    + IsVisible : bool
    // Die Hintergrundfarbe.
    + BackgroundColor : Func<Color>
    // Die Vordergrundfarbe.
    + ForegroundColor : Func<Color>
    // Die horizontale Ausrichtung.
    + AlignX : HorizontalAlignment
    // Die vertikale Ausrichtung.
    + AlignY : VerticalAlignment
  Methods:
    // Die Ausmaße des grafischen Elements
    + BoundingBox () : Rectangle
    // Erstellt ein neues grafisches Benutzerschnittstellenelement in dem angegebenen Spielzustand
    // mit der angegebenen Zeichenreihenfolge.
    + Widget (GameScreen screen, DisplayLayer drawOrder) : void

// Ein Inputhandler, der Tastatureingaben auf Widgets verarbeitet.
public class WidgetKeyHandler : 
  Attributes:
  Methods:
    // 
    + Update () : void

// Ein Inputhandler, der Mauseingaben auf Widgets verarbeitet.
public class WidgetMouseHandler : 
  Attributes:
  Methods:
    // 
    + Update () : void

// Repräsentiert eine Spielwelt, in der sich 3D-Modelle befinden und gezeichnet werden können.
public class World : 
  Attributes:
    // Die Kamera dieser Spielwelt.
    + Camera : Camera
    // Die Liste von Spielobjekten.
    + Objects : List<IGameObject>
    // Das aktuell ausgewählte Spielobjekt.
    + SelectedObject : IGameObject
    // Der aktuell angewendete Rendereffekt.
    + CurrentEffect : IRenderEffect
  Methods:
    // Ruft auf allen Spielobjekten die Update()-Methode auf.
    + Update (GameTime GameTime) : void
    // Ruft auf allen Spielobjekten die Draw()-Methode auf.
    + Draw (GameTime GameTime) : void
    // Erstellt eine neue Spielwelt im angegebenen Spielzustand.
    + World (GameScreen screen) : void
    // Liefert einen Enumerator über die Spielobjekte dieser Spielwelt.
    + GetEnumerator () : IEnumerator

